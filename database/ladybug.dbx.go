// AUTOGENERATED BY gopkg.in/spacemonkeygo/dbx.v1
// DO NOT EDIT.

package database

import (
	"bytes"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"

	"github.com/lib/pq"

	"github.com/mattn/go-sqlite3"
)

// Prevent conditional imports from causing build failures
var _ = strconv.Itoa
var _ = strings.LastIndex
var _ = fmt.Sprint
var _ sync.Mutex

var (
	WrapErr = func(err *Error) error { return err }
	Logger  func(format string, args ...interface{})

	errTooManyRows       = errors.New("too many rows")
	errUnsupportedDriver = errors.New("unsupported driver")
	errEmptyUpdate       = errors.New("empty update")
)

func logError(format string, args ...interface{}) {
	if Logger != nil {
		Logger(format, args...)
	}
}

type ErrorCode int

const (
	ErrorCode_Unknown ErrorCode = iota
	ErrorCode_UnsupportedDriver
	ErrorCode_NoRows
	ErrorCode_TxDone
	ErrorCode_TooManyRows
	ErrorCode_ConstraintViolation
	ErrorCode_EmptyUpdate
)

type Error struct {
	Err         error
	Code        ErrorCode
	Driver      string
	Constraint  string
	QuerySuffix string
}

func (e *Error) Error() string {
	return e.Err.Error()
}

func wrapErr(e *Error) error {
	if WrapErr == nil {
		return e
	}
	return WrapErr(e)
}

func makeErr(err error) error {
	if err == nil {
		return nil
	}
	e := &Error{Err: err}
	switch err {
	case sql.ErrNoRows:
		e.Code = ErrorCode_NoRows
	case sql.ErrTxDone:
		e.Code = ErrorCode_TxDone
	}
	return wrapErr(e)
}

func unsupportedDriver(driver string) error {
	return wrapErr(&Error{
		Err:    errUnsupportedDriver,
		Code:   ErrorCode_UnsupportedDriver,
		Driver: driver,
	})
}

func emptyUpdate() error {
	return wrapErr(&Error{
		Err:  errEmptyUpdate,
		Code: ErrorCode_EmptyUpdate,
	})
}

func tooManyRows(query_suffix string) error {
	return wrapErr(&Error{
		Err:         errTooManyRows,
		Code:        ErrorCode_TooManyRows,
		QuerySuffix: query_suffix,
	})
}

func constraintViolation(err error, constraint string) error {
	return wrapErr(&Error{
		Err:        err,
		Code:       ErrorCode_ConstraintViolation,
		Constraint: constraint,
	})
}

type driver interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
}

var (
	notAPointer     = errors.New("destination not a pointer")
	lossyConversion = errors.New("lossy conversion")
)

type DB struct {
	*sql.DB
	dbMethods

	Hooks struct {
		Now func() time.Time
	}
}

func Open(driver, source string) (db *DB, err error) {
	var sql_db *sql.DB
	switch driver {
	case "postgres":
		sql_db, err = openpostgres(source)
	case "sqlite3":
		sql_db, err = opensqlite3(source)
	default:
		return nil, unsupportedDriver(driver)
	}
	if err != nil {
		return nil, makeErr(err)
	}
	defer func(sql_db *sql.DB) {
		if err != nil {
			sql_db.Close()
		}
	}(sql_db)

	if err := sql_db.Ping(); err != nil {
		return nil, makeErr(err)
	}

	db = &DB{
		DB: sql_db,
	}
	db.Hooks.Now = time.Now

	switch driver {
	case "postgres":
		db.dbMethods = newpostgres(db)
	case "sqlite3":
		db.dbMethods = newsqlite3(db)
	default:
		return nil, unsupportedDriver(driver)
	}

	return db, nil
}

func (obj *DB) Close() (err error) {
	return obj.makeErr(obj.DB.Close())
}

func (obj *DB) Open(ctx context.Context) (*Tx, error) {
	tx, err := obj.DB.Begin()
	if err != nil {
		return nil, obj.makeErr(err)
	}

	return &Tx{
		Tx:        tx,
		txMethods: obj.wrapTx(tx),
	}, nil
}

func (obj *DB) NewRx() *Rx {
	return &Rx{db: obj}
}

func DeleteAll(ctx context.Context, db *DB) (int64, error) {
	tx, err := db.Open(ctx)
	if err != nil {
		return 0, err
	}
	defer func() {
		if err == nil {
			err = db.makeErr(tx.Commit())
			return
		}

		if err_rollback := tx.Rollback(); err_rollback != nil {
			logError("delete-all: rollback failed: %v", db.makeErr(err_rollback))
		}
	}()
	return tx.deleteAll(ctx)
}

type Tx struct {
	Tx *sql.Tx
	txMethods
}

type dialectTx struct {
	tx *sql.Tx
}

func (tx *dialectTx) Commit() (err error) {
	return makeErr(tx.tx.Commit())
}

func (tx *dialectTx) Rollback() (err error) {
	return makeErr(tx.tx.Rollback())
}

type postgresImpl struct {
	db      *DB
	dialect __sqlbundle_postgres
	driver  driver
}

func (obj *postgresImpl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *postgresImpl) logStmt(stmt string, args ...interface{}) {
	postgresLogStmt(stmt, args...)
}

func (obj *postgresImpl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type postgresDB struct {
	db *DB
	*postgresImpl
}

func newpostgres(db *DB) *postgresDB {
	return &postgresDB{
		db: db,
		postgresImpl: &postgresImpl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *postgresDB) Schema() string {
	return `CREATE TABLE addresses (
	pk bigserial NOT NULL,
	buyer_pk bigint NOT NULL,
	created_at timestamp with time zone NOT NULL,
	street_address text NOT NULL,
	city text NOT NULL,
	state text NOT NULL,
	zip integer NOT NULL,
	is_billing boolean NOT NULL,
	id text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE buyers (
	pk bigserial NOT NULL,
	created_at timestamp with time zone NOT NULL,
	updated_at timestamp with time zone NOT NULL,
	id text NOT NULL,
	first_name text NOT NULL,
	last_name text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE buyer_emails (
	pk bigserial NOT NULL,
	buyer_pk bigint NOT NULL,
	created_at timestamp with time zone NOT NULL,
	address text NOT NULL,
	salted_hash text NOT NULL,
	id text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id ),
	UNIQUE ( address )
);
CREATE TABLE buyer_sessions (
	pk bigserial NOT NULL,
	buyer_pk bigint NOT NULL,
	id text NOT NULL,
	created_at timestamp with time zone NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE conversations (
	pk bigserial NOT NULL,
	vendor_pk bigint NOT NULL,
	buyer_pk bigint NOT NULL,
	buyer_unread boolean NOT NULL,
	vendor_unread boolean NOT NULL,
	message_count bigint NOT NULL,
	id text NOT NULL,
	created_at timestamp with time zone NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE executive_contacts (
	pk bigserial NOT NULL,
	id text NOT NULL,
	vendor_pk bigint NOT NULL,
	first_name text NOT NULL,
	last_name text NOT NULL,
	created_at timestamp with time zone NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE messages (
	pk bigserial NOT NULL,
	id text NOT NULL,
	created_at timestamp with time zone NOT NULL,
	buyer_sent boolean NOT NULL,
	description text NOT NULL,
	conversation_pk bigint NOT NULL,
	conversation_number bigint NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE products (
	pk bigserial NOT NULL,
	id text NOT NULL,
	vendor_pk bigint NOT NULL,
	created_at timestamp with time zone NOT NULL,
	price real NOT NULL,
	discount real NOT NULL,
	discount_active boolean NOT NULL,
	sku text NOT NULL,
	google_bucket_id text NOT NULL,
	ladybug_approved boolean NOT NULL,
	product_active boolean NOT NULL,
	num_in_stock integer NOT NULL,
	description text NOT NULL,
	rating real NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE product_reviews (
	pk bigserial NOT NULL,
	id text NOT NULL,
	buyer_pk bigint NOT NULL,
	product_pk bigint NOT NULL,
	rating integer NOT NULL,
	description text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE purchased_products (
	pk bigserial NOT NULL,
	id text NOT NULL,
	vendor_pk bigint NOT NULL,
	buyer_pk bigint NOT NULL,
	product_pk bigint NOT NULL,
	purchase_price real NOT NULL,
	created_at timestamp with time zone NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE trial_products (
	pk bigserial NOT NULL,
	id text NOT NULL,
	vendor_pk bigint NOT NULL,
	buyer_pk bigint NOT NULL,
	product_pk bigint NOT NULL,
	created_at timestamp with time zone NOT NULL,
	trial_price real NOT NULL,
	is_returned boolean NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE vendors (
	pk bigserial NOT NULL,
	id text NOT NULL,
	created_at timestamp with time zone NOT NULL,
	fein text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE vendor_addresses (
	pk bigserial NOT NULL,
	vendor_pk bigint NOT NULL,
	created_at timestamp with time zone NOT NULL,
	street_address text NOT NULL,
	city text NOT NULL,
	state text NOT NULL,
	zip integer NOT NULL,
	is_billing boolean NOT NULL,
	id text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE vendor_emails (
	pk bigserial NOT NULL,
	id text NOT NULL,
	executive_contact_pk bigint NOT NULL,
	created_at timestamp with time zone NOT NULL,
	address text NOT NULL,
	salted_hash text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id ),
	UNIQUE ( address )
);
CREATE TABLE vendor_phones (
	pk bigserial NOT NULL,
	id text NOT NULL,
	executive_contact_pk bigint NOT NULL,
	phone_number integer NOT NULL,
	country_code integer NOT NULL,
	area_code integer NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id ),
	UNIQUE ( phone_number )
);
CREATE TABLE vendor_sessions (
	pk bigserial NOT NULL,
	vendor_pk bigint NOT NULL,
	id text NOT NULL,
	created_at timestamp with time zone NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);`
}

func (obj *postgresDB) wrapTx(tx *sql.Tx) txMethods {
	return &postgresTx{
		dialectTx: dialectTx{tx: tx},
		postgresImpl: &postgresImpl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type postgresTx struct {
	dialectTx
	*postgresImpl
}

func postgresLogStmt(stmt string, args ...interface{}) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type sqlite3Impl struct {
	db      *DB
	dialect __sqlbundle_sqlite3
	driver  driver
}

func (obj *sqlite3Impl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *sqlite3Impl) logStmt(stmt string, args ...interface{}) {
	sqlite3LogStmt(stmt, args...)
}

func (obj *sqlite3Impl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type sqlite3DB struct {
	db *DB
	*sqlite3Impl
}

func newsqlite3(db *DB) *sqlite3DB {
	return &sqlite3DB{
		db: db,
		sqlite3Impl: &sqlite3Impl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *sqlite3DB) Schema() string {
	return `CREATE TABLE addresses (
	pk INTEGER NOT NULL,
	buyer_pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	street_address TEXT NOT NULL,
	city TEXT NOT NULL,
	state TEXT NOT NULL,
	zip INTEGER NOT NULL,
	is_billing INTEGER NOT NULL,
	id TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE buyers (
	pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	updated_at TIMESTAMP NOT NULL,
	id TEXT NOT NULL,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE buyer_emails (
	pk INTEGER NOT NULL,
	buyer_pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	address TEXT NOT NULL,
	salted_hash TEXT NOT NULL,
	id TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id ),
	UNIQUE ( address )
);
CREATE TABLE buyer_sessions (
	pk INTEGER NOT NULL,
	buyer_pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	created_at TIMESTAMP NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE conversations (
	pk INTEGER NOT NULL,
	vendor_pk INTEGER NOT NULL,
	buyer_pk INTEGER NOT NULL,
	buyer_unread INTEGER NOT NULL,
	vendor_unread INTEGER NOT NULL,
	message_count INTEGER NOT NULL,
	id TEXT NOT NULL,
	created_at TIMESTAMP NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE executive_contacts (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	vendor_pk INTEGER NOT NULL,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	created_at TIMESTAMP NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE messages (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	created_at TIMESTAMP NOT NULL,
	buyer_sent INTEGER NOT NULL,
	description TEXT NOT NULL,
	conversation_pk INTEGER NOT NULL,
	conversation_number INTEGER NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE products (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	vendor_pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	price REAL NOT NULL,
	discount REAL NOT NULL,
	discount_active INTEGER NOT NULL,
	sku TEXT NOT NULL,
	google_bucket_id TEXT NOT NULL,
	ladybug_approved INTEGER NOT NULL,
	product_active INTEGER NOT NULL,
	num_in_stock INTEGER NOT NULL,
	description TEXT NOT NULL,
	rating REAL NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE product_reviews (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	buyer_pk INTEGER NOT NULL,
	product_pk INTEGER NOT NULL,
	rating INTEGER NOT NULL,
	description TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE purchased_products (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	vendor_pk INTEGER NOT NULL,
	buyer_pk INTEGER NOT NULL,
	product_pk INTEGER NOT NULL,
	purchase_price REAL NOT NULL,
	created_at TIMESTAMP NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE trial_products (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	vendor_pk INTEGER NOT NULL,
	buyer_pk INTEGER NOT NULL,
	product_pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	trial_price REAL NOT NULL,
	is_returned INTEGER NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE vendors (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	created_at TIMESTAMP NOT NULL,
	fein TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE vendor_addresses (
	pk INTEGER NOT NULL,
	vendor_pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	street_address TEXT NOT NULL,
	city TEXT NOT NULL,
	state TEXT NOT NULL,
	zip INTEGER NOT NULL,
	is_billing INTEGER NOT NULL,
	id TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);
CREATE TABLE vendor_emails (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	executive_contact_pk INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	address TEXT NOT NULL,
	salted_hash TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id ),
	UNIQUE ( address )
);
CREATE TABLE vendor_phones (
	pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	executive_contact_pk INTEGER NOT NULL,
	phone_number INTEGER NOT NULL,
	country_code INTEGER NOT NULL,
	area_code INTEGER NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id ),
	UNIQUE ( phone_number )
);
CREATE TABLE vendor_sessions (
	pk INTEGER NOT NULL,
	vendor_pk INTEGER NOT NULL,
	id TEXT NOT NULL,
	created_at TIMESTAMP NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( id )
);`
}

func (obj *sqlite3DB) wrapTx(tx *sql.Tx) txMethods {
	return &sqlite3Tx{
		dialectTx: dialectTx{tx: tx},
		sqlite3Impl: &sqlite3Impl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type sqlite3Tx struct {
	dialectTx
	*sqlite3Impl
}

func sqlite3LogStmt(stmt string, args ...interface{}) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type pretty []interface{}

func (p pretty) Format(f fmt.State, c rune) {
	fmt.Fprint(f, "[")
nextval:
	for i, val := range p {
		if i > 0 {
			fmt.Fprint(f, ", ")
		}
		rv := reflect.ValueOf(val)
		if rv.Kind() == reflect.Ptr {
			if rv.IsNil() {
				fmt.Fprint(f, "NULL")
				continue
			}
			val = rv.Elem().Interface()
		}
		switch v := val.(type) {
		case string:
			fmt.Fprintf(f, "%q", v)
		case time.Time:
			fmt.Fprintf(f, "%s", v.Format(time.RFC3339Nano))
		case []byte:
			for _, b := range v {
				if !unicode.IsPrint(rune(b)) {
					fmt.Fprintf(f, "%#x", v)
					continue nextval
				}
			}
			fmt.Fprintf(f, "%q", v)
		default:
			fmt.Fprintf(f, "%v", v)
		}
	}
	fmt.Fprint(f, "]")
}

type Address struct {
	Pk            int64
	BuyerPk       int64
	CreatedAt     time.Time
	StreetAddress string
	City          string
	State         string
	Zip           int
	IsBilling     bool
	Id            string
}

func (Address) _Table() string { return "addresses" }

type Address_Update_Fields struct {
	StreetAddress Address_StreetAddress_Field
	City          Address_City_Field
	State         Address_State_Field
	Zip           Address_Zip_Field
}

type Address_Pk_Field struct {
	_set   bool
	_value int64
}

func Address_Pk(v int64) Address_Pk_Field {
	return Address_Pk_Field{_set: true, _value: v}
}

func (f Address_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_Pk_Field) _Column() string { return "pk" }

type Address_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func Address_BuyerPk(v int64) Address_BuyerPk_Field {
	return Address_BuyerPk_Field{_set: true, _value: v}
}

func (f Address_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_BuyerPk_Field) _Column() string { return "buyer_pk" }

type Address_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Address_CreatedAt(v time.Time) Address_CreatedAt_Field {
	return Address_CreatedAt_Field{_set: true, _value: v}
}

func (f Address_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_CreatedAt_Field) _Column() string { return "created_at" }

type Address_StreetAddress_Field struct {
	_set   bool
	_value string
}

func Address_StreetAddress(v string) Address_StreetAddress_Field {
	return Address_StreetAddress_Field{_set: true, _value: v}
}

func (f Address_StreetAddress_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_StreetAddress_Field) _Column() string { return "street_address" }

type Address_City_Field struct {
	_set   bool
	_value string
}

func Address_City(v string) Address_City_Field {
	return Address_City_Field{_set: true, _value: v}
}

func (f Address_City_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_City_Field) _Column() string { return "city" }

type Address_State_Field struct {
	_set   bool
	_value string
}

func Address_State(v string) Address_State_Field {
	return Address_State_Field{_set: true, _value: v}
}

func (f Address_State_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_State_Field) _Column() string { return "state" }

type Address_Zip_Field struct {
	_set   bool
	_value int
}

func Address_Zip(v int) Address_Zip_Field {
	return Address_Zip_Field{_set: true, _value: v}
}

func (f Address_Zip_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_Zip_Field) _Column() string { return "zip" }

type Address_IsBilling_Field struct {
	_set   bool
	_value bool
}

func Address_IsBilling(v bool) Address_IsBilling_Field {
	return Address_IsBilling_Field{_set: true, _value: v}
}

func (f Address_IsBilling_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_IsBilling_Field) _Column() string { return "is_billing" }

type Address_Id_Field struct {
	_set   bool
	_value string
}

func Address_Id(v string) Address_Id_Field {
	return Address_Id_Field{_set: true, _value: v}
}

func (f Address_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Address_Id_Field) _Column() string { return "id" }

type Buyer struct {
	Pk        int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Id        string
	FirstName string
	LastName  string
}

func (Buyer) _Table() string { return "buyers" }

type Buyer_Update_Fields struct {
	FirstName Buyer_FirstName_Field
	LastName  Buyer_LastName_Field
}

type Buyer_Pk_Field struct {
	_set   bool
	_value int64
}

func Buyer_Pk(v int64) Buyer_Pk_Field {
	return Buyer_Pk_Field{_set: true, _value: v}
}

func (f Buyer_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Buyer_Pk_Field) _Column() string { return "pk" }

type Buyer_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Buyer_CreatedAt(v time.Time) Buyer_CreatedAt_Field {
	return Buyer_CreatedAt_Field{_set: true, _value: v}
}

func (f Buyer_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Buyer_CreatedAt_Field) _Column() string { return "created_at" }

type Buyer_UpdatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Buyer_UpdatedAt(v time.Time) Buyer_UpdatedAt_Field {
	return Buyer_UpdatedAt_Field{_set: true, _value: v}
}

func (f Buyer_UpdatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Buyer_UpdatedAt_Field) _Column() string { return "updated_at" }

type Buyer_Id_Field struct {
	_set   bool
	_value string
}

func Buyer_Id(v string) Buyer_Id_Field {
	return Buyer_Id_Field{_set: true, _value: v}
}

func (f Buyer_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Buyer_Id_Field) _Column() string { return "id" }

type Buyer_FirstName_Field struct {
	_set   bool
	_value string
}

func Buyer_FirstName(v string) Buyer_FirstName_Field {
	return Buyer_FirstName_Field{_set: true, _value: v}
}

func (f Buyer_FirstName_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Buyer_FirstName_Field) _Column() string { return "first_name" }

type Buyer_LastName_Field struct {
	_set   bool
	_value string
}

func Buyer_LastName(v string) Buyer_LastName_Field {
	return Buyer_LastName_Field{_set: true, _value: v}
}

func (f Buyer_LastName_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Buyer_LastName_Field) _Column() string { return "last_name" }

type BuyerEmail struct {
	Pk         int64
	BuyerPk    int64
	CreatedAt  time.Time
	Address    string
	SaltedHash string
	Id         string
}

func (BuyerEmail) _Table() string { return "buyer_emails" }

type BuyerEmail_Update_Fields struct {
	Address    BuyerEmail_Address_Field
	SaltedHash BuyerEmail_SaltedHash_Field
}

type BuyerEmail_Pk_Field struct {
	_set   bool
	_value int64
}

func BuyerEmail_Pk(v int64) BuyerEmail_Pk_Field {
	return BuyerEmail_Pk_Field{_set: true, _value: v}
}

func (f BuyerEmail_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerEmail_Pk_Field) _Column() string { return "pk" }

type BuyerEmail_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func BuyerEmail_BuyerPk(v int64) BuyerEmail_BuyerPk_Field {
	return BuyerEmail_BuyerPk_Field{_set: true, _value: v}
}

func (f BuyerEmail_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerEmail_BuyerPk_Field) _Column() string { return "buyer_pk" }

type BuyerEmail_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func BuyerEmail_CreatedAt(v time.Time) BuyerEmail_CreatedAt_Field {
	return BuyerEmail_CreatedAt_Field{_set: true, _value: v}
}

func (f BuyerEmail_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerEmail_CreatedAt_Field) _Column() string { return "created_at" }

type BuyerEmail_Address_Field struct {
	_set   bool
	_value string
}

func BuyerEmail_Address(v string) BuyerEmail_Address_Field {
	return BuyerEmail_Address_Field{_set: true, _value: v}
}

func (f BuyerEmail_Address_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerEmail_Address_Field) _Column() string { return "address" }

type BuyerEmail_SaltedHash_Field struct {
	_set   bool
	_value string
}

func BuyerEmail_SaltedHash(v string) BuyerEmail_SaltedHash_Field {
	return BuyerEmail_SaltedHash_Field{_set: true, _value: v}
}

func (f BuyerEmail_SaltedHash_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerEmail_SaltedHash_Field) _Column() string { return "salted_hash" }

type BuyerEmail_Id_Field struct {
	_set   bool
	_value string
}

func BuyerEmail_Id(v string) BuyerEmail_Id_Field {
	return BuyerEmail_Id_Field{_set: true, _value: v}
}

func (f BuyerEmail_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerEmail_Id_Field) _Column() string { return "id" }

type BuyerSession struct {
	Pk        int64
	BuyerPk   int64
	Id        string
	CreatedAt time.Time
}

func (BuyerSession) _Table() string { return "buyer_sessions" }

type BuyerSession_Update_Fields struct {
}

type BuyerSession_Pk_Field struct {
	_set   bool
	_value int64
}

func BuyerSession_Pk(v int64) BuyerSession_Pk_Field {
	return BuyerSession_Pk_Field{_set: true, _value: v}
}

func (f BuyerSession_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerSession_Pk_Field) _Column() string { return "pk" }

type BuyerSession_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func BuyerSession_BuyerPk(v int64) BuyerSession_BuyerPk_Field {
	return BuyerSession_BuyerPk_Field{_set: true, _value: v}
}

func (f BuyerSession_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerSession_BuyerPk_Field) _Column() string { return "buyer_pk" }

type BuyerSession_Id_Field struct {
	_set   bool
	_value string
}

func BuyerSession_Id(v string) BuyerSession_Id_Field {
	return BuyerSession_Id_Field{_set: true, _value: v}
}

func (f BuyerSession_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerSession_Id_Field) _Column() string { return "id" }

type BuyerSession_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func BuyerSession_CreatedAt(v time.Time) BuyerSession_CreatedAt_Field {
	return BuyerSession_CreatedAt_Field{_set: true, _value: v}
}

func (f BuyerSession_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (BuyerSession_CreatedAt_Field) _Column() string { return "created_at" }

type Conversation struct {
	Pk           int64
	VendorPk     int64
	BuyerPk      int64
	BuyerUnread  bool
	VendorUnread bool
	MessageCount int64
	Id           string
	CreatedAt    time.Time
}

func (Conversation) _Table() string { return "conversations" }

type Conversation_Update_Fields struct {
	BuyerUnread  Conversation_BuyerUnread_Field
	VendorUnread Conversation_VendorUnread_Field
	MessageCount Conversation_MessageCount_Field
}

type Conversation_Pk_Field struct {
	_set   bool
	_value int64
}

func Conversation_Pk(v int64) Conversation_Pk_Field {
	return Conversation_Pk_Field{_set: true, _value: v}
}

func (f Conversation_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_Pk_Field) _Column() string { return "pk" }

type Conversation_VendorPk_Field struct {
	_set   bool
	_value int64
}

func Conversation_VendorPk(v int64) Conversation_VendorPk_Field {
	return Conversation_VendorPk_Field{_set: true, _value: v}
}

func (f Conversation_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_VendorPk_Field) _Column() string { return "vendor_pk" }

type Conversation_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func Conversation_BuyerPk(v int64) Conversation_BuyerPk_Field {
	return Conversation_BuyerPk_Field{_set: true, _value: v}
}

func (f Conversation_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_BuyerPk_Field) _Column() string { return "buyer_pk" }

type Conversation_BuyerUnread_Field struct {
	_set   bool
	_value bool
}

func Conversation_BuyerUnread(v bool) Conversation_BuyerUnread_Field {
	return Conversation_BuyerUnread_Field{_set: true, _value: v}
}

func (f Conversation_BuyerUnread_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_BuyerUnread_Field) _Column() string { return "buyer_unread" }

type Conversation_VendorUnread_Field struct {
	_set   bool
	_value bool
}

func Conversation_VendorUnread(v bool) Conversation_VendorUnread_Field {
	return Conversation_VendorUnread_Field{_set: true, _value: v}
}

func (f Conversation_VendorUnread_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_VendorUnread_Field) _Column() string { return "vendor_unread" }

type Conversation_MessageCount_Field struct {
	_set   bool
	_value int64
}

func Conversation_MessageCount(v int64) Conversation_MessageCount_Field {
	return Conversation_MessageCount_Field{_set: true, _value: v}
}

func (f Conversation_MessageCount_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_MessageCount_Field) _Column() string { return "message_count" }

type Conversation_Id_Field struct {
	_set   bool
	_value string
}

func Conversation_Id(v string) Conversation_Id_Field {
	return Conversation_Id_Field{_set: true, _value: v}
}

func (f Conversation_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_Id_Field) _Column() string { return "id" }

type Conversation_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Conversation_CreatedAt(v time.Time) Conversation_CreatedAt_Field {
	return Conversation_CreatedAt_Field{_set: true, _value: v}
}

func (f Conversation_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Conversation_CreatedAt_Field) _Column() string { return "created_at" }

type ExecutiveContact struct {
	Pk        int64
	Id        string
	VendorPk  int64
	FirstName string
	LastName  string
	CreatedAt time.Time
}

func (ExecutiveContact) _Table() string { return "executive_contacts" }

type ExecutiveContact_Update_Fields struct {
}

type ExecutiveContact_Pk_Field struct {
	_set   bool
	_value int64
}

func ExecutiveContact_Pk(v int64) ExecutiveContact_Pk_Field {
	return ExecutiveContact_Pk_Field{_set: true, _value: v}
}

func (f ExecutiveContact_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ExecutiveContact_Pk_Field) _Column() string { return "pk" }

type ExecutiveContact_Id_Field struct {
	_set   bool
	_value string
}

func ExecutiveContact_Id(v string) ExecutiveContact_Id_Field {
	return ExecutiveContact_Id_Field{_set: true, _value: v}
}

func (f ExecutiveContact_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ExecutiveContact_Id_Field) _Column() string { return "id" }

type ExecutiveContact_VendorPk_Field struct {
	_set   bool
	_value int64
}

func ExecutiveContact_VendorPk(v int64) ExecutiveContact_VendorPk_Field {
	return ExecutiveContact_VendorPk_Field{_set: true, _value: v}
}

func (f ExecutiveContact_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ExecutiveContact_VendorPk_Field) _Column() string { return "vendor_pk" }

type ExecutiveContact_FirstName_Field struct {
	_set   bool
	_value string
}

func ExecutiveContact_FirstName(v string) ExecutiveContact_FirstName_Field {
	return ExecutiveContact_FirstName_Field{_set: true, _value: v}
}

func (f ExecutiveContact_FirstName_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ExecutiveContact_FirstName_Field) _Column() string { return "first_name" }

type ExecutiveContact_LastName_Field struct {
	_set   bool
	_value string
}

func ExecutiveContact_LastName(v string) ExecutiveContact_LastName_Field {
	return ExecutiveContact_LastName_Field{_set: true, _value: v}
}

func (f ExecutiveContact_LastName_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ExecutiveContact_LastName_Field) _Column() string { return "last_name" }

type ExecutiveContact_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func ExecutiveContact_CreatedAt(v time.Time) ExecutiveContact_CreatedAt_Field {
	return ExecutiveContact_CreatedAt_Field{_set: true, _value: v}
}

func (f ExecutiveContact_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ExecutiveContact_CreatedAt_Field) _Column() string { return "created_at" }

type Message struct {
	Pk                 int64
	Id                 string
	CreatedAt          time.Time
	BuyerSent          bool
	Description        string
	ConversationPk     int64
	ConversationNumber int64
}

func (Message) _Table() string { return "messages" }

type Message_Update_Fields struct {
}

type Message_Pk_Field struct {
	_set   bool
	_value int64
}

func Message_Pk(v int64) Message_Pk_Field {
	return Message_Pk_Field{_set: true, _value: v}
}

func (f Message_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_Pk_Field) _Column() string { return "pk" }

type Message_Id_Field struct {
	_set   bool
	_value string
}

func Message_Id(v string) Message_Id_Field {
	return Message_Id_Field{_set: true, _value: v}
}

func (f Message_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_Id_Field) _Column() string { return "id" }

type Message_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Message_CreatedAt(v time.Time) Message_CreatedAt_Field {
	return Message_CreatedAt_Field{_set: true, _value: v}
}

func (f Message_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_CreatedAt_Field) _Column() string { return "created_at" }

type Message_BuyerSent_Field struct {
	_set   bool
	_value bool
}

func Message_BuyerSent(v bool) Message_BuyerSent_Field {
	return Message_BuyerSent_Field{_set: true, _value: v}
}

func (f Message_BuyerSent_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_BuyerSent_Field) _Column() string { return "buyer_sent" }

type Message_Description_Field struct {
	_set   bool
	_value string
}

func Message_Description(v string) Message_Description_Field {
	return Message_Description_Field{_set: true, _value: v}
}

func (f Message_Description_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_Description_Field) _Column() string { return "description" }

type Message_ConversationPk_Field struct {
	_set   bool
	_value int64
}

func Message_ConversationPk(v int64) Message_ConversationPk_Field {
	return Message_ConversationPk_Field{_set: true, _value: v}
}

func (f Message_ConversationPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_ConversationPk_Field) _Column() string { return "conversation_pk" }

type Message_ConversationNumber_Field struct {
	_set   bool
	_value int64
}

func Message_ConversationNumber(v int64) Message_ConversationNumber_Field {
	return Message_ConversationNumber_Field{_set: true, _value: v}
}

func (f Message_ConversationNumber_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Message_ConversationNumber_Field) _Column() string { return "conversation_number" }

type Product struct {
	Pk              int64
	Id              string
	VendorPk        int64
	CreatedAt       time.Time
	Price           float32
	Discount        float32
	DiscountActive  bool
	Sku             string
	GoogleBucketId  string
	LadybugApproved bool
	ProductActive   bool
	NumInStock      int
	Description     string
	Rating          float32
}

func (Product) _Table() string { return "products" }

type Product_Update_Fields struct {
	Price           Product_Price_Field
	Discount        Product_Discount_Field
	DiscountActive  Product_DiscountActive_Field
	Sku             Product_Sku_Field
	GoogleBucketId  Product_GoogleBucketId_Field
	LadybugApproved Product_LadybugApproved_Field
	ProductActive   Product_ProductActive_Field
	NumInStock      Product_NumInStock_Field
	Description     Product_Description_Field
	Rating          Product_Rating_Field
}

type Product_Pk_Field struct {
	_set   bool
	_value int64
}

func Product_Pk(v int64) Product_Pk_Field {
	return Product_Pk_Field{_set: true, _value: v}
}

func (f Product_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Pk_Field) _Column() string { return "pk" }

type Product_Id_Field struct {
	_set   bool
	_value string
}

func Product_Id(v string) Product_Id_Field {
	return Product_Id_Field{_set: true, _value: v}
}

func (f Product_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Id_Field) _Column() string { return "id" }

type Product_VendorPk_Field struct {
	_set   bool
	_value int64
}

func Product_VendorPk(v int64) Product_VendorPk_Field {
	return Product_VendorPk_Field{_set: true, _value: v}
}

func (f Product_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_VendorPk_Field) _Column() string { return "vendor_pk" }

type Product_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Product_CreatedAt(v time.Time) Product_CreatedAt_Field {
	return Product_CreatedAt_Field{_set: true, _value: v}
}

func (f Product_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_CreatedAt_Field) _Column() string { return "created_at" }

type Product_Price_Field struct {
	_set   bool
	_value float32
}

func Product_Price(v float32) Product_Price_Field {
	return Product_Price_Field{_set: true, _value: v}
}

func (f Product_Price_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Price_Field) _Column() string { return "price" }

type Product_Discount_Field struct {
	_set   bool
	_value float32
}

func Product_Discount(v float32) Product_Discount_Field {
	return Product_Discount_Field{_set: true, _value: v}
}

func (f Product_Discount_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Discount_Field) _Column() string { return "discount" }

type Product_DiscountActive_Field struct {
	_set   bool
	_value bool
}

func Product_DiscountActive(v bool) Product_DiscountActive_Field {
	return Product_DiscountActive_Field{_set: true, _value: v}
}

func (f Product_DiscountActive_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_DiscountActive_Field) _Column() string { return "discount_active" }

type Product_Sku_Field struct {
	_set   bool
	_value string
}

func Product_Sku(v string) Product_Sku_Field {
	return Product_Sku_Field{_set: true, _value: v}
}

func (f Product_Sku_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Sku_Field) _Column() string { return "sku" }

type Product_GoogleBucketId_Field struct {
	_set   bool
	_value string
}

func Product_GoogleBucketId(v string) Product_GoogleBucketId_Field {
	return Product_GoogleBucketId_Field{_set: true, _value: v}
}

func (f Product_GoogleBucketId_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_GoogleBucketId_Field) _Column() string { return "google_bucket_id" }

type Product_LadybugApproved_Field struct {
	_set   bool
	_value bool
}

func Product_LadybugApproved(v bool) Product_LadybugApproved_Field {
	return Product_LadybugApproved_Field{_set: true, _value: v}
}

func (f Product_LadybugApproved_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_LadybugApproved_Field) _Column() string { return "ladybug_approved" }

type Product_ProductActive_Field struct {
	_set   bool
	_value bool
}

func Product_ProductActive(v bool) Product_ProductActive_Field {
	return Product_ProductActive_Field{_set: true, _value: v}
}

func (f Product_ProductActive_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_ProductActive_Field) _Column() string { return "product_active" }

type Product_NumInStock_Field struct {
	_set   bool
	_value int
}

func Product_NumInStock(v int) Product_NumInStock_Field {
	return Product_NumInStock_Field{_set: true, _value: v}
}

func (f Product_NumInStock_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_NumInStock_Field) _Column() string { return "num_in_stock" }

type Product_Description_Field struct {
	_set   bool
	_value string
}

func Product_Description(v string) Product_Description_Field {
	return Product_Description_Field{_set: true, _value: v}
}

func (f Product_Description_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Description_Field) _Column() string { return "description" }

type Product_Rating_Field struct {
	_set   bool
	_value float32
}

func Product_Rating(v float32) Product_Rating_Field {
	return Product_Rating_Field{_set: true, _value: v}
}

func (f Product_Rating_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Product_Rating_Field) _Column() string { return "rating" }

type ProductReview struct {
	Pk          int64
	Id          string
	BuyerPk     int64
	ProductPk   int64
	Rating      int
	Description string
}

func (ProductReview) _Table() string { return "product_reviews" }

type ProductReview_Update_Fields struct {
	Rating      ProductReview_Rating_Field
	Description ProductReview_Description_Field
}

type ProductReview_Pk_Field struct {
	_set   bool
	_value int64
}

func ProductReview_Pk(v int64) ProductReview_Pk_Field {
	return ProductReview_Pk_Field{_set: true, _value: v}
}

func (f ProductReview_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ProductReview_Pk_Field) _Column() string { return "pk" }

type ProductReview_Id_Field struct {
	_set   bool
	_value string
}

func ProductReview_Id(v string) ProductReview_Id_Field {
	return ProductReview_Id_Field{_set: true, _value: v}
}

func (f ProductReview_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ProductReview_Id_Field) _Column() string { return "id" }

type ProductReview_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func ProductReview_BuyerPk(v int64) ProductReview_BuyerPk_Field {
	return ProductReview_BuyerPk_Field{_set: true, _value: v}
}

func (f ProductReview_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ProductReview_BuyerPk_Field) _Column() string { return "buyer_pk" }

type ProductReview_ProductPk_Field struct {
	_set   bool
	_value int64
}

func ProductReview_ProductPk(v int64) ProductReview_ProductPk_Field {
	return ProductReview_ProductPk_Field{_set: true, _value: v}
}

func (f ProductReview_ProductPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ProductReview_ProductPk_Field) _Column() string { return "product_pk" }

type ProductReview_Rating_Field struct {
	_set   bool
	_value int
}

func ProductReview_Rating(v int) ProductReview_Rating_Field {
	return ProductReview_Rating_Field{_set: true, _value: v}
}

func (f ProductReview_Rating_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ProductReview_Rating_Field) _Column() string { return "rating" }

type ProductReview_Description_Field struct {
	_set   bool
	_value string
}

func ProductReview_Description(v string) ProductReview_Description_Field {
	return ProductReview_Description_Field{_set: true, _value: v}
}

func (f ProductReview_Description_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (ProductReview_Description_Field) _Column() string { return "description" }

type PurchasedProduct struct {
	Pk            int64
	Id            string
	VendorPk      int64
	BuyerPk       int64
	ProductPk     int64
	PurchasePrice float32
	CreatedAt     time.Time
}

func (PurchasedProduct) _Table() string { return "purchased_products" }

type PurchasedProduct_Update_Fields struct {
}

type PurchasedProduct_Pk_Field struct {
	_set   bool
	_value int64
}

func PurchasedProduct_Pk(v int64) PurchasedProduct_Pk_Field {
	return PurchasedProduct_Pk_Field{_set: true, _value: v}
}

func (f PurchasedProduct_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_Pk_Field) _Column() string { return "pk" }

type PurchasedProduct_Id_Field struct {
	_set   bool
	_value string
}

func PurchasedProduct_Id(v string) PurchasedProduct_Id_Field {
	return PurchasedProduct_Id_Field{_set: true, _value: v}
}

func (f PurchasedProduct_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_Id_Field) _Column() string { return "id" }

type PurchasedProduct_VendorPk_Field struct {
	_set   bool
	_value int64
}

func PurchasedProduct_VendorPk(v int64) PurchasedProduct_VendorPk_Field {
	return PurchasedProduct_VendorPk_Field{_set: true, _value: v}
}

func (f PurchasedProduct_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_VendorPk_Field) _Column() string { return "vendor_pk" }

type PurchasedProduct_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func PurchasedProduct_BuyerPk(v int64) PurchasedProduct_BuyerPk_Field {
	return PurchasedProduct_BuyerPk_Field{_set: true, _value: v}
}

func (f PurchasedProduct_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_BuyerPk_Field) _Column() string { return "buyer_pk" }

type PurchasedProduct_ProductPk_Field struct {
	_set   bool
	_value int64
}

func PurchasedProduct_ProductPk(v int64) PurchasedProduct_ProductPk_Field {
	return PurchasedProduct_ProductPk_Field{_set: true, _value: v}
}

func (f PurchasedProduct_ProductPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_ProductPk_Field) _Column() string { return "product_pk" }

type PurchasedProduct_PurchasePrice_Field struct {
	_set   bool
	_value float32
}

func PurchasedProduct_PurchasePrice(v float32) PurchasedProduct_PurchasePrice_Field {
	return PurchasedProduct_PurchasePrice_Field{_set: true, _value: v}
}

func (f PurchasedProduct_PurchasePrice_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_PurchasePrice_Field) _Column() string { return "purchase_price" }

type PurchasedProduct_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func PurchasedProduct_CreatedAt(v time.Time) PurchasedProduct_CreatedAt_Field {
	return PurchasedProduct_CreatedAt_Field{_set: true, _value: v}
}

func (f PurchasedProduct_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (PurchasedProduct_CreatedAt_Field) _Column() string { return "created_at" }

type TrialProduct struct {
	Pk         int64
	Id         string
	VendorPk   int64
	BuyerPk    int64
	ProductPk  int64
	CreatedAt  time.Time
	TrialPrice float32
	IsReturned bool
}

func (TrialProduct) _Table() string { return "trial_products" }

type TrialProduct_Update_Fields struct {
	IsReturned TrialProduct_IsReturned_Field
}

type TrialProduct_Pk_Field struct {
	_set   bool
	_value int64
}

func TrialProduct_Pk(v int64) TrialProduct_Pk_Field {
	return TrialProduct_Pk_Field{_set: true, _value: v}
}

func (f TrialProduct_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_Pk_Field) _Column() string { return "pk" }

type TrialProduct_Id_Field struct {
	_set   bool
	_value string
}

func TrialProduct_Id(v string) TrialProduct_Id_Field {
	return TrialProduct_Id_Field{_set: true, _value: v}
}

func (f TrialProduct_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_Id_Field) _Column() string { return "id" }

type TrialProduct_VendorPk_Field struct {
	_set   bool
	_value int64
}

func TrialProduct_VendorPk(v int64) TrialProduct_VendorPk_Field {
	return TrialProduct_VendorPk_Field{_set: true, _value: v}
}

func (f TrialProduct_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_VendorPk_Field) _Column() string { return "vendor_pk" }

type TrialProduct_BuyerPk_Field struct {
	_set   bool
	_value int64
}

func TrialProduct_BuyerPk(v int64) TrialProduct_BuyerPk_Field {
	return TrialProduct_BuyerPk_Field{_set: true, _value: v}
}

func (f TrialProduct_BuyerPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_BuyerPk_Field) _Column() string { return "buyer_pk" }

type TrialProduct_ProductPk_Field struct {
	_set   bool
	_value int64
}

func TrialProduct_ProductPk(v int64) TrialProduct_ProductPk_Field {
	return TrialProduct_ProductPk_Field{_set: true, _value: v}
}

func (f TrialProduct_ProductPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_ProductPk_Field) _Column() string { return "product_pk" }

type TrialProduct_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func TrialProduct_CreatedAt(v time.Time) TrialProduct_CreatedAt_Field {
	return TrialProduct_CreatedAt_Field{_set: true, _value: v}
}

func (f TrialProduct_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_CreatedAt_Field) _Column() string { return "created_at" }

type TrialProduct_TrialPrice_Field struct {
	_set   bool
	_value float32
}

func TrialProduct_TrialPrice(v float32) TrialProduct_TrialPrice_Field {
	return TrialProduct_TrialPrice_Field{_set: true, _value: v}
}

func (f TrialProduct_TrialPrice_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_TrialPrice_Field) _Column() string { return "trial_price" }

type TrialProduct_IsReturned_Field struct {
	_set   bool
	_value bool
}

func TrialProduct_IsReturned(v bool) TrialProduct_IsReturned_Field {
	return TrialProduct_IsReturned_Field{_set: true, _value: v}
}

func (f TrialProduct_IsReturned_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (TrialProduct_IsReturned_Field) _Column() string { return "is_returned" }

type Vendor struct {
	Pk        int64
	Id        string
	CreatedAt time.Time
	Fein      string
}

func (Vendor) _Table() string { return "vendors" }

type Vendor_Update_Fields struct {
	Fein Vendor_Fein_Field
}

type Vendor_Pk_Field struct {
	_set   bool
	_value int64
}

func Vendor_Pk(v int64) Vendor_Pk_Field {
	return Vendor_Pk_Field{_set: true, _value: v}
}

func (f Vendor_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Vendor_Pk_Field) _Column() string { return "pk" }

type Vendor_Id_Field struct {
	_set   bool
	_value string
}

func Vendor_Id(v string) Vendor_Id_Field {
	return Vendor_Id_Field{_set: true, _value: v}
}

func (f Vendor_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Vendor_Id_Field) _Column() string { return "id" }

type Vendor_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func Vendor_CreatedAt(v time.Time) Vendor_CreatedAt_Field {
	return Vendor_CreatedAt_Field{_set: true, _value: v}
}

func (f Vendor_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Vendor_CreatedAt_Field) _Column() string { return "created_at" }

type Vendor_Fein_Field struct {
	_set   bool
	_value string
}

func Vendor_Fein(v string) Vendor_Fein_Field {
	return Vendor_Fein_Field{_set: true, _value: v}
}

func (f Vendor_Fein_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (Vendor_Fein_Field) _Column() string { return "fein" }

type VendorAddress struct {
	Pk            int64
	VendorPk      int64
	CreatedAt     time.Time
	StreetAddress string
	City          string
	State         string
	Zip           int
	IsBilling     bool
	Id            string
}

func (VendorAddress) _Table() string { return "vendor_addresses" }

type VendorAddress_Update_Fields struct {
	StreetAddress VendorAddress_StreetAddress_Field
	City          VendorAddress_City_Field
	State         VendorAddress_State_Field
	Zip           VendorAddress_Zip_Field
}

type VendorAddress_Pk_Field struct {
	_set   bool
	_value int64
}

func VendorAddress_Pk(v int64) VendorAddress_Pk_Field {
	return VendorAddress_Pk_Field{_set: true, _value: v}
}

func (f VendorAddress_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_Pk_Field) _Column() string { return "pk" }

type VendorAddress_VendorPk_Field struct {
	_set   bool
	_value int64
}

func VendorAddress_VendorPk(v int64) VendorAddress_VendorPk_Field {
	return VendorAddress_VendorPk_Field{_set: true, _value: v}
}

func (f VendorAddress_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_VendorPk_Field) _Column() string { return "vendor_pk" }

type VendorAddress_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func VendorAddress_CreatedAt(v time.Time) VendorAddress_CreatedAt_Field {
	return VendorAddress_CreatedAt_Field{_set: true, _value: v}
}

func (f VendorAddress_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_CreatedAt_Field) _Column() string { return "created_at" }

type VendorAddress_StreetAddress_Field struct {
	_set   bool
	_value string
}

func VendorAddress_StreetAddress(v string) VendorAddress_StreetAddress_Field {
	return VendorAddress_StreetAddress_Field{_set: true, _value: v}
}

func (f VendorAddress_StreetAddress_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_StreetAddress_Field) _Column() string { return "street_address" }

type VendorAddress_City_Field struct {
	_set   bool
	_value string
}

func VendorAddress_City(v string) VendorAddress_City_Field {
	return VendorAddress_City_Field{_set: true, _value: v}
}

func (f VendorAddress_City_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_City_Field) _Column() string { return "city" }

type VendorAddress_State_Field struct {
	_set   bool
	_value string
}

func VendorAddress_State(v string) VendorAddress_State_Field {
	return VendorAddress_State_Field{_set: true, _value: v}
}

func (f VendorAddress_State_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_State_Field) _Column() string { return "state" }

type VendorAddress_Zip_Field struct {
	_set   bool
	_value int
}

func VendorAddress_Zip(v int) VendorAddress_Zip_Field {
	return VendorAddress_Zip_Field{_set: true, _value: v}
}

func (f VendorAddress_Zip_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_Zip_Field) _Column() string { return "zip" }

type VendorAddress_IsBilling_Field struct {
	_set   bool
	_value bool
}

func VendorAddress_IsBilling(v bool) VendorAddress_IsBilling_Field {
	return VendorAddress_IsBilling_Field{_set: true, _value: v}
}

func (f VendorAddress_IsBilling_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_IsBilling_Field) _Column() string { return "is_billing" }

type VendorAddress_Id_Field struct {
	_set   bool
	_value string
}

func VendorAddress_Id(v string) VendorAddress_Id_Field {
	return VendorAddress_Id_Field{_set: true, _value: v}
}

func (f VendorAddress_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorAddress_Id_Field) _Column() string { return "id" }

type VendorEmail struct {
	Pk                 int64
	Id                 string
	ExecutiveContactPk int64
	CreatedAt          time.Time
	Address            string
	SaltedHash         string
}

func (VendorEmail) _Table() string { return "vendor_emails" }

type VendorEmail_Update_Fields struct {
	Address    VendorEmail_Address_Field
	SaltedHash VendorEmail_SaltedHash_Field
}

type VendorEmail_Pk_Field struct {
	_set   bool
	_value int64
}

func VendorEmail_Pk(v int64) VendorEmail_Pk_Field {
	return VendorEmail_Pk_Field{_set: true, _value: v}
}

func (f VendorEmail_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorEmail_Pk_Field) _Column() string { return "pk" }

type VendorEmail_Id_Field struct {
	_set   bool
	_value string
}

func VendorEmail_Id(v string) VendorEmail_Id_Field {
	return VendorEmail_Id_Field{_set: true, _value: v}
}

func (f VendorEmail_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorEmail_Id_Field) _Column() string { return "id" }

type VendorEmail_ExecutiveContactPk_Field struct {
	_set   bool
	_value int64
}

func VendorEmail_ExecutiveContactPk(v int64) VendorEmail_ExecutiveContactPk_Field {
	return VendorEmail_ExecutiveContactPk_Field{_set: true, _value: v}
}

func (f VendorEmail_ExecutiveContactPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorEmail_ExecutiveContactPk_Field) _Column() string { return "executive_contact_pk" }

type VendorEmail_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func VendorEmail_CreatedAt(v time.Time) VendorEmail_CreatedAt_Field {
	return VendorEmail_CreatedAt_Field{_set: true, _value: v}
}

func (f VendorEmail_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorEmail_CreatedAt_Field) _Column() string { return "created_at" }

type VendorEmail_Address_Field struct {
	_set   bool
	_value string
}

func VendorEmail_Address(v string) VendorEmail_Address_Field {
	return VendorEmail_Address_Field{_set: true, _value: v}
}

func (f VendorEmail_Address_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorEmail_Address_Field) _Column() string { return "address" }

type VendorEmail_SaltedHash_Field struct {
	_set   bool
	_value string
}

func VendorEmail_SaltedHash(v string) VendorEmail_SaltedHash_Field {
	return VendorEmail_SaltedHash_Field{_set: true, _value: v}
}

func (f VendorEmail_SaltedHash_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorEmail_SaltedHash_Field) _Column() string { return "salted_hash" }

type VendorPhone struct {
	Pk                 int64
	Id                 string
	ExecutiveContactPk int64
	PhoneNumber        int
	CountryCode        int
	AreaCode           int
}

func (VendorPhone) _Table() string { return "vendor_phones" }

type VendorPhone_Update_Fields struct {
}

type VendorPhone_Pk_Field struct {
	_set   bool
	_value int64
}

func VendorPhone_Pk(v int64) VendorPhone_Pk_Field {
	return VendorPhone_Pk_Field{_set: true, _value: v}
}

func (f VendorPhone_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorPhone_Pk_Field) _Column() string { return "pk" }

type VendorPhone_Id_Field struct {
	_set   bool
	_value string
}

func VendorPhone_Id(v string) VendorPhone_Id_Field {
	return VendorPhone_Id_Field{_set: true, _value: v}
}

func (f VendorPhone_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorPhone_Id_Field) _Column() string { return "id" }

type VendorPhone_ExecutiveContactPk_Field struct {
	_set   bool
	_value int64
}

func VendorPhone_ExecutiveContactPk(v int64) VendorPhone_ExecutiveContactPk_Field {
	return VendorPhone_ExecutiveContactPk_Field{_set: true, _value: v}
}

func (f VendorPhone_ExecutiveContactPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorPhone_ExecutiveContactPk_Field) _Column() string { return "executive_contact_pk" }

type VendorPhone_PhoneNumber_Field struct {
	_set   bool
	_value int
}

func VendorPhone_PhoneNumber(v int) VendorPhone_PhoneNumber_Field {
	return VendorPhone_PhoneNumber_Field{_set: true, _value: v}
}

func (f VendorPhone_PhoneNumber_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorPhone_PhoneNumber_Field) _Column() string { return "phone_number" }

type VendorPhone_CountryCode_Field struct {
	_set   bool
	_value int
}

func VendorPhone_CountryCode(v int) VendorPhone_CountryCode_Field {
	return VendorPhone_CountryCode_Field{_set: true, _value: v}
}

func (f VendorPhone_CountryCode_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorPhone_CountryCode_Field) _Column() string { return "country_code" }

type VendorPhone_AreaCode_Field struct {
	_set   bool
	_value int
}

func VendorPhone_AreaCode(v int) VendorPhone_AreaCode_Field {
	return VendorPhone_AreaCode_Field{_set: true, _value: v}
}

func (f VendorPhone_AreaCode_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorPhone_AreaCode_Field) _Column() string { return "area_code" }

type VendorSession struct {
	Pk        int64
	VendorPk  int64
	Id        string
	CreatedAt time.Time
}

func (VendorSession) _Table() string { return "vendor_sessions" }

type VendorSession_Update_Fields struct {
}

type VendorSession_Pk_Field struct {
	_set   bool
	_value int64
}

func VendorSession_Pk(v int64) VendorSession_Pk_Field {
	return VendorSession_Pk_Field{_set: true, _value: v}
}

func (f VendorSession_Pk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorSession_Pk_Field) _Column() string { return "pk" }

type VendorSession_VendorPk_Field struct {
	_set   bool
	_value int64
}

func VendorSession_VendorPk(v int64) VendorSession_VendorPk_Field {
	return VendorSession_VendorPk_Field{_set: true, _value: v}
}

func (f VendorSession_VendorPk_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorSession_VendorPk_Field) _Column() string { return "vendor_pk" }

type VendorSession_Id_Field struct {
	_set   bool
	_value string
}

func VendorSession_Id(v string) VendorSession_Id_Field {
	return VendorSession_Id_Field{_set: true, _value: v}
}

func (f VendorSession_Id_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorSession_Id_Field) _Column() string { return "id" }

type VendorSession_CreatedAt_Field struct {
	_set   bool
	_value time.Time
}

func VendorSession_CreatedAt(v time.Time) VendorSession_CreatedAt_Field {
	return VendorSession_CreatedAt_Field{_set: true, _value: v}
}

func (f VendorSession_CreatedAt_Field) value() interface{} {
	if !f._set {
		return nil
	}
	return f._value
}

func (VendorSession_CreatedAt_Field) _Column() string { return "created_at" }

func toUTC(t time.Time) time.Time {
	return t.UTC()
}

func toDate(t time.Time) time.Time {
	// keep up the minute portion so that translations between timezones will
	// continue to reflect properly.
	return t.Truncate(time.Minute)
}

//
// runtime support for building sql statements
//

type __sqlbundle_SQL interface {
	Render() string

	private()
}

type __sqlbundle_Dialect interface {
	Rebind(sql string) string
}

type __sqlbundle_RenderOp int

const (
	__sqlbundle_NoFlatten __sqlbundle_RenderOp = iota
	__sqlbundle_NoTerminate
)

func __sqlbundle_Render(dialect __sqlbundle_Dialect, sql __sqlbundle_SQL, ops ...__sqlbundle_RenderOp) string {
	out := sql.Render()

	flatten := true
	terminate := true
	for _, op := range ops {
		switch op {
		case __sqlbundle_NoFlatten:
			flatten = false
		case __sqlbundle_NoTerminate:
			terminate = false
		}
	}

	if flatten {
		out = __sqlbundle_flattenSQL(out)
	}
	if terminate {
		out += ";"
	}

	return dialect.Rebind(out)
}

var __sqlbundle_reSpace = regexp.MustCompile(`\s+`)

func __sqlbundle_flattenSQL(s string) string {
	return strings.TrimSpace(__sqlbundle_reSpace.ReplaceAllString(s, " "))
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_postgres struct{}

func (p __sqlbundle_postgres) Rebind(sql string) string {
	out := make([]byte, 0, len(sql)+10)

	j := 1
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		if ch != '?' {
			out = append(out, ch)
			continue
		}

		out = append(out, '$')
		out = append(out, strconv.Itoa(j)...)
		j++
	}

	return string(out)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_sqlite3 struct{}

func (s __sqlbundle_sqlite3) Rebind(sql string) string {
	return sql
}

type __sqlbundle_Literal string

func (__sqlbundle_Literal) private() {}

func (l __sqlbundle_Literal) Render() string { return string(l) }

type __sqlbundle_Literals struct {
	Join string
	SQLs []__sqlbundle_SQL
}

func (__sqlbundle_Literals) private() {}

func (l __sqlbundle_Literals) Render() string {
	var out bytes.Buffer

	first := true
	for _, sql := range l.SQLs {
		if sql == nil {
			continue
		}
		if !first {
			out.WriteString(l.Join)
		}
		first = false
		out.WriteString(sql.Render())
	}

	return out.String()
}

type __sqlbundle_Condition struct {
	// set at compile/embed time
	Name  string
	Left  string
	Equal bool
	Right string

	// set at runtime
	Null bool
}

func (*__sqlbundle_Condition) private() {}

func (c *__sqlbundle_Condition) Render() string {

	switch {
	case c.Equal && c.Null:
		return c.Left + " is null"
	case c.Equal && !c.Null:
		return c.Left + " = " + c.Right
	case !c.Equal && c.Null:
		return c.Left + " is not null"
	case !c.Equal && !c.Null:
		return c.Left + " != " + c.Right
	default:
		panic("unhandled case")
	}
}

type __sqlbundle_Hole struct {
	// set at compiile/embed time
	Name string

	// set at runtime
	SQL __sqlbundle_SQL
}

func (*__sqlbundle_Hole) private() {}

func (h *__sqlbundle_Hole) Render() string { return h.SQL.Render() }

//
// end runtime support for building sql statements
//

type BuyerPk_Row struct {
	BuyerPk int64
}

type Pk_Price_Row struct {
	Pk    int64
	Price float32
}

type Pk_Row struct {
	Pk int64
}

type VendorPk_Row struct {
	VendorPk int64
}

func (obj *postgresImpl) Create_Buyer(ctx context.Context,
	buyer_id Buyer_Id_Field,
	buyer_first_name Buyer_FirstName_Field,
	buyer_last_name Buyer_LastName_Field) (
	buyer *Buyer, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__created_at_val := __now
	__updated_at_val := __now
	__id_val := buyer_id.value()
	__first_name_val := buyer_first_name.value()
	__last_name_val := buyer_last_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyers ( created_at, updated_at, id, first_name, last_name ) VALUES ( ?, ?, ?, ?, ? ) RETURNING buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil

}

func (obj *postgresImpl) CreateNoReturn_Buyer(ctx context.Context,
	buyer_id Buyer_Id_Field,
	buyer_first_name Buyer_FirstName_Field,
	buyer_last_name Buyer_LastName_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__created_at_val := __now
	__updated_at_val := __now
	__id_val := buyer_id.value()
	__first_name_val := buyer_first_name.value()
	__last_name_val := buyer_last_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyers ( created_at, updated_at, id, first_name, last_name ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)

	_, err = obj.driver.Exec(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_BuyerEmail(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
	buyer_email_address BuyerEmail_Address_Field,
	buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
	buyer_email_id BuyerEmail_Id_Field) (
	buyer_email *BuyerEmail, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_email_buyer_pk.value()
	__created_at_val := __now
	__address_val := buyer_email_address.value()
	__salted_hash_val := buyer_email_salted_hash.value()
	__id_val := buyer_email_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_emails ( buyer_pk, created_at, address, salted_hash, id ) VALUES ( ?, ?, ?, ?, ? ) RETURNING buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil

}

func (obj *postgresImpl) CreateNoReturn_BuyerEmail(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
	buyer_email_address BuyerEmail_Address_Field,
	buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
	buyer_email_id BuyerEmail_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_email_buyer_pk.value()
	__created_at_val := __now
	__address_val := buyer_email_address.value()
	__salted_hash_val := buyer_email_salted_hash.value()
	__id_val := buyer_email_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_emails ( buyer_pk, created_at, address, salted_hash, id ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)

	_, err = obj.driver.Exec(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_Address(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field,
	address_street_address Address_StreetAddress_Field,
	address_city Address_City_Field,
	address_state Address_State_Field,
	address_zip Address_Zip_Field,
	address_is_billing Address_IsBilling_Field,
	address_id Address_Id_Field) (
	address *Address, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := address_buyer_pk.value()
	__created_at_val := __now
	__street_address_val := address_street_address.value()
	__city_val := address_city.value()
	__state_val := address_state.value()
	__zip_val := address_zip.value()
	__is_billing_val := address_is_billing.value()
	__id_val := address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO addresses ( buyer_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) RETURNING addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	address = &Address{}
	err = obj.driver.QueryRow(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val).Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return address, nil

}

func (obj *postgresImpl) CreateNoReturn_Address(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field,
	address_street_address Address_StreetAddress_Field,
	address_city Address_City_Field,
	address_state Address_State_Field,
	address_zip Address_Zip_Field,
	address_is_billing Address_IsBilling_Field,
	address_id Address_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := address_buyer_pk.value()
	__created_at_val := __now
	__street_address_val := address_street_address.value()
	__city_val := address_city.value()
	__state_val := address_state.value()
	__zip_val := address_zip.value()
	__is_billing_val := address_is_billing.value()
	__id_val := address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO addresses ( buyer_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	_, err = obj.driver.Exec(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_BuyerSession(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
	buyer_session_id BuyerSession_Id_Field) (
	buyer_session *BuyerSession, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_session_buyer_pk.value()
	__id_val := buyer_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_sessions ( buyer_pk, id, created_at ) VALUES ( ?, ?, ? ) RETURNING buyer_sessions.pk, buyer_sessions.buyer_pk, buyer_sessions.id, buyer_sessions.created_at")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __id_val, __created_at_val)

	buyer_session = &BuyerSession{}
	err = obj.driver.QueryRow(__stmt, __buyer_pk_val, __id_val, __created_at_val).Scan(&buyer_session.Pk, &buyer_session.BuyerPk, &buyer_session.Id, &buyer_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_session, nil

}

func (obj *postgresImpl) CreateNoReturn_BuyerSession(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
	buyer_session_id BuyerSession_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_session_buyer_pk.value()
	__id_val := buyer_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_sessions ( buyer_pk, id, created_at ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __id_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __buyer_pk_val, __id_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_Vendor(ctx context.Context,
	vendor_id Vendor_Id_Field,
	vendor_fein Vendor_Fein_Field) (
	vendor *Vendor, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_id.value()
	__created_at_val := __now
	__fein_val := vendor_fein.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendors ( id, created_at, fein ) VALUES ( ?, ?, ? ) RETURNING vendors.pk, vendors.id, vendors.created_at, vendors.fein")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __fein_val)

	vendor = &Vendor{}
	err = obj.driver.QueryRow(__stmt, __id_val, __created_at_val, __fein_val).Scan(&vendor.Pk, &vendor.Id, &vendor.CreatedAt, &vendor.Fein)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor, nil

}

func (obj *postgresImpl) CreateNoReturn_Vendor(ctx context.Context,
	vendor_id Vendor_Id_Field,
	vendor_fein Vendor_Fein_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_id.value()
	__created_at_val := __now
	__fein_val := vendor_fein.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendors ( id, created_at, fein ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __fein_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __created_at_val, __fein_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_ExecutiveContact(ctx context.Context,
	executive_contact_id ExecutiveContact_Id_Field,
	executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
	executive_contact_first_name ExecutiveContact_FirstName_Field,
	executive_contact_last_name ExecutiveContact_LastName_Field) (
	executive_contact *ExecutiveContact, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := executive_contact_id.value()
	__vendor_pk_val := executive_contact_vendor_pk.value()
	__first_name_val := executive_contact_first_name.value()
	__last_name_val := executive_contact_last_name.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO executive_contacts ( id, vendor_pk, first_name, last_name, created_at ) VALUES ( ?, ?, ?, ?, ? ) RETURNING executive_contacts.pk, executive_contacts.id, executive_contacts.vendor_pk, executive_contacts.first_name, executive_contacts.last_name, executive_contacts.created_at")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)

	executive_contact = &ExecutiveContact{}
	err = obj.driver.QueryRow(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val).Scan(&executive_contact.Pk, &executive_contact.Id, &executive_contact.VendorPk, &executive_contact.FirstName, &executive_contact.LastName, &executive_contact.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return executive_contact, nil

}

func (obj *postgresImpl) CreateNoReturn_ExecutiveContact(ctx context.Context,
	executive_contact_id ExecutiveContact_Id_Field,
	executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
	executive_contact_first_name ExecutiveContact_FirstName_Field,
	executive_contact_last_name ExecutiveContact_LastName_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := executive_contact_id.value()
	__vendor_pk_val := executive_contact_vendor_pk.value()
	__first_name_val := executive_contact_first_name.value()
	__last_name_val := executive_contact_last_name.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO executive_contacts ( id, vendor_pk, first_name, last_name, created_at ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_VendorEmail(ctx context.Context,
	vendor_email_id VendorEmail_Id_Field,
	vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
	vendor_email_address VendorEmail_Address_Field,
	vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
	vendor_email *VendorEmail, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_email_id.value()
	__executive_contact_pk_val := vendor_email_executive_contact_pk.value()
	__created_at_val := __now
	__address_val := vendor_email_address.value()
	__salted_hash_val := vendor_email_salted_hash.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_emails ( id, executive_contact_pk, created_at, address, salted_hash ) VALUES ( ?, ?, ?, ?, ? ) RETURNING vendor_emails.pk, vendor_emails.id, vendor_emails.executive_contact_pk, vendor_emails.created_at, vendor_emails.address, vendor_emails.salted_hash")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)

	vendor_email = &VendorEmail{}
	err = obj.driver.QueryRow(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val).Scan(&vendor_email.Pk, &vendor_email.Id, &vendor_email.ExecutiveContactPk, &vendor_email.CreatedAt, &vendor_email.Address, &vendor_email.SaltedHash)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_email, nil

}

func (obj *postgresImpl) CreateNoReturn_VendorEmail(ctx context.Context,
	vendor_email_id VendorEmail_Id_Field,
	vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
	vendor_email_address VendorEmail_Address_Field,
	vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_email_id.value()
	__executive_contact_pk_val := vendor_email_executive_contact_pk.value()
	__created_at_val := __now
	__address_val := vendor_email_address.value()
	__salted_hash_val := vendor_email_salted_hash.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_emails ( id, executive_contact_pk, created_at, address, salted_hash ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_VendorPhone(ctx context.Context,
	vendor_phone_id VendorPhone_Id_Field,
	vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
	vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
	vendor_phone_country_code VendorPhone_CountryCode_Field,
	vendor_phone_area_code VendorPhone_AreaCode_Field) (
	vendor_phone *VendorPhone, err error) {
	__id_val := vendor_phone_id.value()
	__executive_contact_pk_val := vendor_phone_executive_contact_pk.value()
	__phone_number_val := vendor_phone_phone_number.value()
	__country_code_val := vendor_phone_country_code.value()
	__area_code_val := vendor_phone_area_code.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_phones ( id, executive_contact_pk, phone_number, country_code, area_code ) VALUES ( ?, ?, ?, ?, ? ) RETURNING vendor_phones.pk, vendor_phones.id, vendor_phones.executive_contact_pk, vendor_phones.phone_number, vendor_phones.country_code, vendor_phones.area_code")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)

	vendor_phone = &VendorPhone{}
	err = obj.driver.QueryRow(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val).Scan(&vendor_phone.Pk, &vendor_phone.Id, &vendor_phone.ExecutiveContactPk, &vendor_phone.PhoneNumber, &vendor_phone.CountryCode, &vendor_phone.AreaCode)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_phone, nil

}

func (obj *postgresImpl) CreateNoReturn_VendorPhone(ctx context.Context,
	vendor_phone_id VendorPhone_Id_Field,
	vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
	vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
	vendor_phone_country_code VendorPhone_CountryCode_Field,
	vendor_phone_area_code VendorPhone_AreaCode_Field) (
	err error) {
	__id_val := vendor_phone_id.value()
	__executive_contact_pk_val := vendor_phone_executive_contact_pk.value()
	__phone_number_val := vendor_phone_phone_number.value()
	__country_code_val := vendor_phone_country_code.value()
	__area_code_val := vendor_phone_area_code.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_phones ( id, executive_contact_pk, phone_number, country_code, area_code ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_VendorAddress(ctx context.Context,
	vendor_address_vendor_pk VendorAddress_VendorPk_Field,
	vendor_address_street_address VendorAddress_StreetAddress_Field,
	vendor_address_city VendorAddress_City_Field,
	vendor_address_state VendorAddress_State_Field,
	vendor_address_zip VendorAddress_Zip_Field,
	vendor_address_is_billing VendorAddress_IsBilling_Field,
	vendor_address_id VendorAddress_Id_Field) (
	vendor_address *VendorAddress, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_address_vendor_pk.value()
	__created_at_val := __now
	__street_address_val := vendor_address_street_address.value()
	__city_val := vendor_address_city.value()
	__state_val := vendor_address_state.value()
	__zip_val := vendor_address_zip.value()
	__is_billing_val := vendor_address_is_billing.value()
	__id_val := vendor_address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_addresses ( vendor_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) RETURNING vendor_addresses.pk, vendor_addresses.vendor_pk, vendor_addresses.created_at, vendor_addresses.street_address, vendor_addresses.city, vendor_addresses.state, vendor_addresses.zip, vendor_addresses.is_billing, vendor_addresses.id")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	vendor_address = &VendorAddress{}
	err = obj.driver.QueryRow(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val).Scan(&vendor_address.Pk, &vendor_address.VendorPk, &vendor_address.CreatedAt, &vendor_address.StreetAddress, &vendor_address.City, &vendor_address.State, &vendor_address.Zip, &vendor_address.IsBilling, &vendor_address.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_address, nil

}

func (obj *postgresImpl) CreateNoReturn_VendorAddress(ctx context.Context,
	vendor_address_vendor_pk VendorAddress_VendorPk_Field,
	vendor_address_street_address VendorAddress_StreetAddress_Field,
	vendor_address_city VendorAddress_City_Field,
	vendor_address_state VendorAddress_State_Field,
	vendor_address_zip VendorAddress_Zip_Field,
	vendor_address_is_billing VendorAddress_IsBilling_Field,
	vendor_address_id VendorAddress_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_address_vendor_pk.value()
	__created_at_val := __now
	__street_address_val := vendor_address_street_address.value()
	__city_val := vendor_address_city.value()
	__state_val := vendor_address_state.value()
	__zip_val := vendor_address_zip.value()
	__is_billing_val := vendor_address_is_billing.value()
	__id_val := vendor_address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_addresses ( vendor_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	_, err = obj.driver.Exec(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_Product(ctx context.Context,
	product_id Product_Id_Field,
	product_vendor_pk Product_VendorPk_Field,
	product_price Product_Price_Field,
	product_discount Product_Discount_Field,
	product_discount_active Product_DiscountActive_Field,
	product_sku Product_Sku_Field,
	product_google_bucket_id Product_GoogleBucketId_Field,
	product_ladybug_approved Product_LadybugApproved_Field,
	product_product_active Product_ProductActive_Field,
	product_num_in_stock Product_NumInStock_Field,
	product_description Product_Description_Field,
	product_rating Product_Rating_Field) (
	product *Product, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := product_id.value()
	__vendor_pk_val := product_vendor_pk.value()
	__created_at_val := __now
	__price_val := product_price.value()
	__discount_val := product_discount.value()
	__discount_active_val := product_discount_active.value()
	__sku_val := product_sku.value()
	__google_bucket_id_val := product_google_bucket_id.value()
	__ladybug_approved_val := product_ladybug_approved.value()
	__product_active_val := product_product_active.value()
	__num_in_stock_val := product_num_in_stock.value()
	__description_val := product_description.value()
	__rating_val := product_rating.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO products ( id, vendor_pk, created_at, price, discount, discount_active, sku, google_bucket_id, ladybug_approved, product_active, num_in_stock, description, rating ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) RETURNING products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)

	product = &Product{}
	err = obj.driver.QueryRow(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val).Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product, nil

}

func (obj *postgresImpl) CreateNoReturn_Product(ctx context.Context,
	product_id Product_Id_Field,
	product_vendor_pk Product_VendorPk_Field,
	product_price Product_Price_Field,
	product_discount Product_Discount_Field,
	product_discount_active Product_DiscountActive_Field,
	product_sku Product_Sku_Field,
	product_google_bucket_id Product_GoogleBucketId_Field,
	product_ladybug_approved Product_LadybugApproved_Field,
	product_product_active Product_ProductActive_Field,
	product_num_in_stock Product_NumInStock_Field,
	product_description Product_Description_Field,
	product_rating Product_Rating_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := product_id.value()
	__vendor_pk_val := product_vendor_pk.value()
	__created_at_val := __now
	__price_val := product_price.value()
	__discount_val := product_discount.value()
	__discount_active_val := product_discount_active.value()
	__sku_val := product_sku.value()
	__google_bucket_id_val := product_google_bucket_id.value()
	__ladybug_approved_val := product_ladybug_approved.value()
	__product_active_val := product_product_active.value()
	__num_in_stock_val := product_num_in_stock.value()
	__description_val := product_description.value()
	__rating_val := product_rating.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO products ( id, vendor_pk, created_at, price, discount, discount_active, sku, google_bucket_id, ladybug_approved, product_active, num_in_stock, description, rating ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_ProductReview(ctx context.Context,
	product_review_id ProductReview_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field,
	product_review_product_pk ProductReview_ProductPk_Field,
	product_review_rating ProductReview_Rating_Field,
	product_review_description ProductReview_Description_Field) (
	product_review *ProductReview, err error) {
	__id_val := product_review_id.value()
	__buyer_pk_val := product_review_buyer_pk.value()
	__product_pk_val := product_review_product_pk.value()
	__rating_val := product_review_rating.value()
	__description_val := product_review_description.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO product_reviews ( id, buyer_pk, product_pk, rating, description ) VALUES ( ?, ?, ?, ?, ? ) RETURNING product_reviews.pk, product_reviews.id, product_reviews.buyer_pk, product_reviews.product_pk, product_reviews.rating, product_reviews.description")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)

	product_review = &ProductReview{}
	err = obj.driver.QueryRow(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val).Scan(&product_review.Pk, &product_review.Id, &product_review.BuyerPk, &product_review.ProductPk, &product_review.Rating, &product_review.Description)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product_review, nil

}

func (obj *postgresImpl) CreateNoReturn_ProductReview(ctx context.Context,
	product_review_id ProductReview_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field,
	product_review_product_pk ProductReview_ProductPk_Field,
	product_review_rating ProductReview_Rating_Field,
	product_review_description ProductReview_Description_Field) (
	err error) {
	__id_val := product_review_id.value()
	__buyer_pk_val := product_review_buyer_pk.value()
	__product_pk_val := product_review_product_pk.value()
	__rating_val := product_review_rating.value()
	__description_val := product_review_description.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO product_reviews ( id, buyer_pk, product_pk, rating, description ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_TrialProduct(ctx context.Context,
	trial_product_id TrialProduct_Id_Field,
	trial_product_vendor_pk TrialProduct_VendorPk_Field,
	trial_product_buyer_pk TrialProduct_BuyerPk_Field,
	trial_product_product_pk TrialProduct_ProductPk_Field,
	trial_product_trial_price TrialProduct_TrialPrice_Field,
	trial_product_is_returned TrialProduct_IsReturned_Field) (
	trial_product *TrialProduct, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := trial_product_id.value()
	__vendor_pk_val := trial_product_vendor_pk.value()
	__buyer_pk_val := trial_product_buyer_pk.value()
	__product_pk_val := trial_product_product_pk.value()
	__created_at_val := __now
	__trial_price_val := trial_product_trial_price.value()
	__is_returned_val := trial_product_is_returned.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO trial_products ( id, vendor_pk, buyer_pk, product_pk, created_at, trial_price, is_returned ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) RETURNING trial_products.pk, trial_products.id, trial_products.vendor_pk, trial_products.buyer_pk, trial_products.product_pk, trial_products.created_at, trial_products.trial_price, trial_products.is_returned")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __created_at_val, __trial_price_val, __is_returned_val)

	trial_product = &TrialProduct{}
	err = obj.driver.QueryRow(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __created_at_val, __trial_price_val, __is_returned_val).Scan(&trial_product.Pk, &trial_product.Id, &trial_product.VendorPk, &trial_product.BuyerPk, &trial_product.ProductPk, &trial_product.CreatedAt, &trial_product.TrialPrice, &trial_product.IsReturned)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return trial_product, nil

}

func (obj *postgresImpl) Create_PurchasedProduct(ctx context.Context,
	purchased_product_id PurchasedProduct_Id_Field,
	purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
	purchased_product_product_pk PurchasedProduct_ProductPk_Field,
	purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
	purchased_product *PurchasedProduct, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := purchased_product_id.value()
	__vendor_pk_val := purchased_product_vendor_pk.value()
	__buyer_pk_val := purchased_product_buyer_pk.value()
	__product_pk_val := purchased_product_product_pk.value()
	__purchase_price_val := purchased_product_purchase_price.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO purchased_products ( id, vendor_pk, buyer_pk, product_pk, purchase_price, created_at ) VALUES ( ?, ?, ?, ?, ?, ? ) RETURNING purchased_products.pk, purchased_products.id, purchased_products.vendor_pk, purchased_products.buyer_pk, purchased_products.product_pk, purchased_products.purchase_price, purchased_products.created_at")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)

	purchased_product = &PurchasedProduct{}
	err = obj.driver.QueryRow(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val).Scan(&purchased_product.Pk, &purchased_product.Id, &purchased_product.VendorPk, &purchased_product.BuyerPk, &purchased_product.ProductPk, &purchased_product.PurchasePrice, &purchased_product.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return purchased_product, nil

}

func (obj *postgresImpl) CreateNoReturn_PurchasedProduct(ctx context.Context,
	purchased_product_id PurchasedProduct_Id_Field,
	purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
	purchased_product_product_pk PurchasedProduct_ProductPk_Field,
	purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := purchased_product_id.value()
	__vendor_pk_val := purchased_product_vendor_pk.value()
	__buyer_pk_val := purchased_product_buyer_pk.value()
	__product_pk_val := purchased_product_product_pk.value()
	__purchase_price_val := purchased_product_purchase_price.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO purchased_products ( id, vendor_pk, buyer_pk, product_pk, purchase_price, created_at ) VALUES ( ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_VendorSession(ctx context.Context,
	vendor_session_vendor_pk VendorSession_VendorPk_Field,
	vendor_session_id VendorSession_Id_Field) (
	vendor_session *VendorSession, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_session_vendor_pk.value()
	__id_val := vendor_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_sessions ( vendor_pk, id, created_at ) VALUES ( ?, ?, ? ) RETURNING vendor_sessions.pk, vendor_sessions.vendor_pk, vendor_sessions.id, vendor_sessions.created_at")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __id_val, __created_at_val)

	vendor_session = &VendorSession{}
	err = obj.driver.QueryRow(__stmt, __vendor_pk_val, __id_val, __created_at_val).Scan(&vendor_session.Pk, &vendor_session.VendorPk, &vendor_session.Id, &vendor_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_session, nil

}

func (obj *postgresImpl) CreateNoReturn_VendorSession(ctx context.Context,
	vendor_session_vendor_pk VendorSession_VendorPk_Field,
	vendor_session_id VendorSession_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_session_vendor_pk.value()
	__id_val := vendor_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_sessions ( vendor_pk, id, created_at ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __id_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __vendor_pk_val, __id_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Create_Conversation(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field,
	conversation_buyer_unread Conversation_BuyerUnread_Field,
	conversation_vendor_unread Conversation_VendorUnread_Field,
	conversation_message_count Conversation_MessageCount_Field,
	conversation_id Conversation_Id_Field) (
	conversation *Conversation, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := conversation_vendor_pk.value()
	__buyer_pk_val := conversation_buyer_pk.value()
	__buyer_unread_val := conversation_buyer_unread.value()
	__vendor_unread_val := conversation_vendor_unread.value()
	__message_count_val := conversation_message_count.value()
	__id_val := conversation_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO conversations ( vendor_pk, buyer_pk, buyer_unread, vendor_unread, message_count, id, created_at ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) RETURNING conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __buyer_pk_val, __buyer_unread_val, __vendor_unread_val, __message_count_val, __id_val, __created_at_val)

	conversation = &Conversation{}
	err = obj.driver.QueryRow(__stmt, __vendor_pk_val, __buyer_pk_val, __buyer_unread_val, __vendor_unread_val, __message_count_val, __id_val, __created_at_val).Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return conversation, nil

}

func (obj *postgresImpl) Create_Message(ctx context.Context,
	message_id Message_Id_Field,
	message_buyer_sent Message_BuyerSent_Field,
	message_description Message_Description_Field,
	message_conversation_pk Message_ConversationPk_Field,
	message_conversation_number Message_ConversationNumber_Field) (
	message *Message, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := message_id.value()
	__created_at_val := __now
	__buyer_sent_val := message_buyer_sent.value()
	__description_val := message_description.value()
	__conversation_pk_val := message_conversation_pk.value()
	__conversation_number_val := message_conversation_number.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO messages ( id, created_at, buyer_sent, description, conversation_pk, conversation_number ) VALUES ( ?, ?, ?, ?, ?, ? ) RETURNING messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)

	message = &Message{}
	err = obj.driver.QueryRow(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val).Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return message, nil

}

func (obj *postgresImpl) CreateNoReturn_Message(ctx context.Context,
	message_id Message_Id_Field,
	message_buyer_sent Message_BuyerSent_Field,
	message_description Message_Description_Field,
	message_conversation_pk Message_ConversationPk_Field,
	message_conversation_number Message_ConversationNumber_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := message_id.value()
	__created_at_val := __now
	__buyer_sent_val := message_buyer_sent.value()
	__description_val := message_description.value()
	__conversation_pk_val := message_conversation_pk.value()
	__conversation_number_val := message_conversation_number.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO messages ( id, created_at, buyer_sent, description, conversation_pk, conversation_number ) VALUES ( ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *postgresImpl) Get_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field) (
	buyer *Buyer, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name FROM buyers WHERE buyers.pk = ?")

	var __values []interface{}
	__values = append(__values, buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil

}

func (obj *postgresImpl) Get_Buyer_Pk_By_Id(ctx context.Context,
	buyer_id Buyer_Id_Field) (
	row *Pk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk FROM buyers WHERE buyers.id = ?")

	var __values []interface{}
	__values = append(__values, buyer_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &Pk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *postgresImpl) Find_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field) (
	buyer *Buyer, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name FROM buyers WHERE buyers.pk = ?")

	var __values []interface{}
	__values = append(__values, buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil

}

func (obj *postgresImpl) All_BuyerEmail_By_BuyerPk(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field) (
	rows []*BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, buyer_email_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		buyer_email := &BuyerEmail{}
		err = __rows.Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, buyer_email)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Get_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field) (
	buyer_email *BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.address = ?")

	var __values []interface{}
	__values = append(__values, buyer_email_address.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil

}

func (obj *postgresImpl) Find_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field) (
	buyer_email *BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.address = ?")

	var __values []interface{}
	__values = append(__values, buyer_email_address.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil

}

func (obj *postgresImpl) All_Address_By_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, address_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		address := &Address{}
		err = __rows.Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, address)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Address_By_IsBilling_Equal_True_And_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.is_billing = true AND addresses.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, address_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		address := &Address{}
		err = __rows.Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, address)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Address_By_IsBilling_Equal_False_And_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.is_billing = false AND addresses.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, address_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		address := &Address{}
		err = __rows.Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, address)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Get_BuyerSession_BuyerPk_By_Id(ctx context.Context,
	buyer_session_id BuyerSession_Id_Field) (
	row *BuyerPk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.buyer_pk FROM buyer_sessions WHERE buyer_sessions.id = ?")

	var __values []interface{}
	__values = append(__values, buyer_session_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &BuyerPk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.BuyerPk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *postgresImpl) Get_BuyerSession_By_BuyerPk(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
	buyer_session *BuyerSession, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.pk, buyer_sessions.buyer_pk, buyer_sessions.id, buyer_sessions.created_at FROM buyer_sessions WHERE buyer_sessions.buyer_pk = ? LIMIT 2")

	var __values []interface{}
	__values = append(__values, buyer_session_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, makeErr(sql.ErrNoRows)
	}

	buyer_session = &BuyerSession{}
	err = __rows.Scan(&buyer_session.Pk, &buyer_session.BuyerPk, &buyer_session.Id, &buyer_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	if __rows.Next() {
		return nil, tooManyRows("BuyerSession_By_BuyerPk")
	}

	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}

	return buyer_session, nil

}

func (obj *postgresImpl) First_BuyerSession_By_BuyerPk(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
	buyer_session *BuyerSession, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.pk, buyer_sessions.buyer_pk, buyer_sessions.id, buyer_sessions.created_at FROM buyer_sessions WHERE buyer_sessions.buyer_pk = ? LIMIT 1 OFFSET 0")

	var __values []interface{}
	__values = append(__values, buyer_session_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, nil
	}

	buyer_session = &BuyerSession{}
	err = __rows.Scan(&buyer_session.Pk, &buyer_session.BuyerPk, &buyer_session.Id, &buyer_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	return buyer_session, nil

}

func (obj *postgresImpl) Get_Vendor_Pk_By_Id(ctx context.Context,
	vendor_id Vendor_Id_Field) (
	row *Pk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendors.pk FROM vendors WHERE vendors.id = ?")

	var __values []interface{}
	__values = append(__values, vendor_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &Pk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *postgresImpl) Get_Product_Pk_Product_Price_By_Id(ctx context.Context,
	product_id Product_Id_Field) (
	row *Pk_Price_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.price FROM products WHERE products.id = ?")

	var __values []interface{}
	__values = append(__values, product_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &Pk_Price_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.Pk, &row.Price)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *postgresImpl) Get_Product_By_Id(ctx context.Context,
	product_id Product_Id_Field) (
	product *Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.id = ?")

	var __values []interface{}
	__values = append(__values, product_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	product = &Product{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product, nil

}

func (obj *postgresImpl) Paged_Product_By_ProductActive_Equal_True_And_LadybugApproved_Equal_True_And_NumInStock_Not_Number(ctx context.Context,
	limit int, ctoken string) (
	rows []*Product, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating, products.pk FROM products WHERE products.product_active = true AND products.ladybug_approved = true AND products.num_in_stock != 0 AND products.pk > ? ORDER BY products.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values)

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		product := &Product{}
		err = __rows.Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, product)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *postgresImpl) All_Product_By_ProductActive_Equal_True(ctx context.Context) (
	rows []*Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.product_active = true")

	var __values []interface{}
	__values = append(__values)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		product := &Product{}
		err = __rows.Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, product)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Product_By_ProductActive_Equal_False_And_LadybugApproved_Equal_True(ctx context.Context) (
	rows []*Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.product_active = false AND products.ladybug_approved = true")

	var __values []interface{}
	__values = append(__values)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		product := &Product{}
		err = __rows.Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, product)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Count_Product_By_ProductActive_Equal_False(ctx context.Context) (
	count int64, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT COUNT(*) FROM products WHERE products.product_active = false")

	var __values []interface{}
	__values = append(__values)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&count)
	if err != nil {
		return 0, obj.makeErr(err)
	}

	return count, nil

}

func (obj *postgresImpl) Has_ProductReview_By_Product_Id_And_ProductReview_BuyerPk(ctx context.Context,
	product_id Product_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field) (
	has bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT EXISTS( SELECT 1 FROM products  JOIN product_reviews ON products.pk = product_reviews.product_pk WHERE products.id = ? AND product_reviews.buyer_pk = ? )")

	var __values []interface{}
	__values = append(__values, product_id.value(), product_review_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&has)
	if err != nil {
		return false, obj.makeErr(err)
	}
	return has, nil

}

func (obj *postgresImpl) Has_PurchasedProduct_By_BuyerPk(ctx context.Context,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field) (
	has bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT EXISTS( SELECT 1 FROM purchased_products WHERE purchased_products.buyer_pk = ? )")

	var __values []interface{}
	__values = append(__values, purchased_product_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&has)
	if err != nil {
		return false, obj.makeErr(err)
	}
	return has, nil

}

func (obj *postgresImpl) Get_VendorSession_VendorPk_By_Id(ctx context.Context,
	vendor_session_id VendorSession_Id_Field) (
	row *VendorPk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendor_sessions.vendor_pk FROM vendor_sessions WHERE vendor_sessions.id = ?")

	var __values []interface{}
	__values = append(__values, vendor_session_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &VendorPk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.VendorPk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *postgresImpl) Get_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ? AND conversations.buyer_pk = ? LIMIT 2")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value(), conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, makeErr(sql.ErrNoRows)
	}

	conversation = &Conversation{}
	err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	if __rows.Next() {
		return nil, tooManyRows("Conversation_By_VendorPk_And_BuyerPk")
	}

	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}

	return conversation, nil

}

func (obj *postgresImpl) Get_Conversation_By_Id(ctx context.Context,
	conversation_id Conversation_Id_Field) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.id = ?")

	var __values []interface{}
	__values = append(__values, conversation_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	conversation = &Conversation{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return conversation, nil

}

func (obj *postgresImpl) Find_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ? AND conversations.buyer_pk = ? LIMIT 2")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value(), conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, nil
	}

	conversation = &Conversation{}
	err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	if __rows.Next() {
		return nil, tooManyRows("Conversation_By_VendorPk_And_BuyerPk")
	}

	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}

	return conversation, nil

}

func (obj *postgresImpl) All_Conversation_By_VendorPk_And_VendorUnread_Equal_True(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ? AND conversations.vendor_unread = true")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Conversation_By_BuyerPk_And_BuyerUnread_Equal_True(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.buyer_pk = ? AND conversations.buyer_unread = true")

	var __values []interface{}
	__values = append(__values, conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Conversation_By_BuyerPk(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Conversation_By_VendorPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ?")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Paged_Conversation_By_BuyerPk(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field,
	limit int, ctoken string) (
	rows []*Conversation, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at, conversations.pk FROM conversations WHERE conversations.buyer_pk = ? AND conversations.pk > ? ORDER BY conversations.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values, conversation_buyer_pk.value())

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *postgresImpl) Paged_Conversation_By_VendorPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	limit int, ctoken string) (
	rows []*Conversation, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at, conversations.pk FROM conversations WHERE conversations.vendor_pk = ? AND conversations.pk > ? ORDER BY conversations.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value())

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *postgresImpl) Get_Message_By_Id(ctx context.Context,
	message_id Message_Id_Field) (
	message *Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE messages.id = ?")

	var __values []interface{}
	__values = append(__values, message_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	message = &Message{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return message, nil

}

func (obj *postgresImpl) All_Message_By_ConversationPk(ctx context.Context,
	message_conversation_pk Message_ConversationPk_Field) (
	rows []*Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE messages.conversation_pk = ?")

	var __values []interface{}
	__values = append(__values, message_conversation_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		message := &Message{}
		err = __rows.Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, message)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Limited_Message_By_ConversationPk_OrderBy_Desc_CreatedAt(ctx context.Context,
	message_conversation_pk Message_ConversationPk_Field,
	limit int, offset int64) (
	rows []*Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE messages.conversation_pk = ? ORDER BY messages.created_at DESC LIMIT ? OFFSET ?")

	var __values []interface{}
	__values = append(__values, message_conversation_pk.value())

	__values = append(__values, limit, offset)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		message := &Message{}
		err = __rows.Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, message)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Update_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field,
	update Buyer_Update_Fields) (
	buyer *Buyer, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyers SET "), __sets, __sqlbundle_Literal(" WHERE buyers.pk = ? RETURNING buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.FirstName._set {
		__values = append(__values, update.FirstName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("first_name = ?"))
	}

	if update.LastName._set {
		__values = append(__values, update.LastName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("last_name = ?"))
	}

	__now := obj.db.Hooks.Now().UTC()

	__values = append(__values, __now)
	__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("updated_at = ?"))

	__args = append(__args, buyer_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil
}

func (obj *postgresImpl) UpdateNoReturn_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field,
	update Buyer_Update_Fields) (
	err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyers SET "), __sets, __sqlbundle_Literal(" WHERE buyers.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.FirstName._set {
		__values = append(__values, update.FirstName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("first_name = ?"))
	}

	if update.LastName._set {
		__values = append(__values, update.LastName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("last_name = ?"))
	}

	__now := obj.db.Hooks.Now().UTC()

	__values = append(__values, __now)
	__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("updated_at = ?"))

	__args = append(__args, buyer_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil
}

func (obj *postgresImpl) Update_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field,
	update BuyerEmail_Update_Fields) (
	buyer_email *BuyerEmail, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyer_emails SET "), __sets, __sqlbundle_Literal(" WHERE buyer_emails.address = ? RETURNING buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Address._set {
		__values = append(__values, update.Address.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("address = ?"))
	}

	if update.SaltedHash._set {
		__values = append(__values, update.SaltedHash.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("salted_hash = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, buyer_email_address.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil
}

func (obj *postgresImpl) UpdateNoReturn_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field,
	update BuyerEmail_Update_Fields) (
	err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyer_emails SET "), __sets, __sqlbundle_Literal(" WHERE buyer_emails.address = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Address._set {
		__values = append(__values, update.Address.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("address = ?"))
	}

	if update.SaltedHash._set {
		__values = append(__values, update.SaltedHash.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("salted_hash = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return emptyUpdate()
	}

	__args = append(__args, buyer_email_address.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil
}

func (obj *postgresImpl) Update_Address_By_Pk(ctx context.Context,
	address_pk Address_Pk_Field,
	update Address_Update_Fields) (
	address *Address, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE addresses SET "), __sets, __sqlbundle_Literal(" WHERE addresses.pk = ? RETURNING addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.StreetAddress._set {
		__values = append(__values, update.StreetAddress.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("street_address = ?"))
	}

	if update.City._set {
		__values = append(__values, update.City.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("city = ?"))
	}

	if update.State._set {
		__values = append(__values, update.State.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("state = ?"))
	}

	if update.Zip._set {
		__values = append(__values, update.Zip.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("zip = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, address_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	address = &Address{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return address, nil
}

func (obj *postgresImpl) Update_Product_By_Pk(ctx context.Context,
	product_pk Product_Pk_Field,
	update Product_Update_Fields) (
	product *Product, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE products SET "), __sets, __sqlbundle_Literal(" WHERE products.pk = ? RETURNING products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Price._set {
		__values = append(__values, update.Price.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("price = ?"))
	}

	if update.Discount._set {
		__values = append(__values, update.Discount.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("discount = ?"))
	}

	if update.DiscountActive._set {
		__values = append(__values, update.DiscountActive.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("discount_active = ?"))
	}

	if update.Sku._set {
		__values = append(__values, update.Sku.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("sku = ?"))
	}

	if update.GoogleBucketId._set {
		__values = append(__values, update.GoogleBucketId.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("google_bucket_id = ?"))
	}

	if update.LadybugApproved._set {
		__values = append(__values, update.LadybugApproved.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("ladybug_approved = ?"))
	}

	if update.ProductActive._set {
		__values = append(__values, update.ProductActive.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("product_active = ?"))
	}

	if update.NumInStock._set {
		__values = append(__values, update.NumInStock.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("num_in_stock = ?"))
	}

	if update.Description._set {
		__values = append(__values, update.Description.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("description = ?"))
	}

	if update.Rating._set {
		__values = append(__values, update.Rating.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("rating = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, product_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	product = &Product{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product, nil
}

func (obj *postgresImpl) Update_Conversation_By_Pk(ctx context.Context,
	conversation_pk Conversation_Pk_Field,
	update Conversation_Update_Fields) (
	conversation *Conversation, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE conversations SET "), __sets, __sqlbundle_Literal(" WHERE conversations.pk = ? RETURNING conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.BuyerUnread._set {
		__values = append(__values, update.BuyerUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("buyer_unread = ?"))
	}

	if update.VendorUnread._set {
		__values = append(__values, update.VendorUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("vendor_unread = ?"))
	}

	if update.MessageCount._set {
		__values = append(__values, update.MessageCount.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("message_count = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, conversation_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	conversation = &Conversation{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return conversation, nil
}

func (obj *postgresImpl) UpdateNoReturn_Conversation_By_Pk(ctx context.Context,
	conversation_pk Conversation_Pk_Field,
	update Conversation_Update_Fields) (
	err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE conversations SET "), __sets, __sqlbundle_Literal(" WHERE conversations.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.BuyerUnread._set {
		__values = append(__values, update.BuyerUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("buyer_unread = ?"))
	}

	if update.VendorUnread._set {
		__values = append(__values, update.VendorUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("vendor_unread = ?"))
	}

	if update.MessageCount._set {
		__values = append(__values, update.MessageCount.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("message_count = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return emptyUpdate()
	}

	__args = append(__args, conversation_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil
}

func (impl postgresImpl) isConstraintError(err error) (
	constraint string, ok bool) {
	if e, ok := err.(*pq.Error); ok {
		if e.Code.Class() == "23" {
			return e.Constraint, true
		}
	}
	return "", false
}

func (obj *postgresImpl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.Exec("DELETE FROM vendor_sessions;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendor_phones;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendor_emails;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendor_addresses;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendors;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM trial_products;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM purchased_products;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM product_reviews;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM products;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM messages;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM executive_contacts;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM conversations;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM buyer_sessions;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM buyer_emails;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM buyers;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM addresses;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

func (obj *sqlite3Impl) Create_Buyer(ctx context.Context,
	buyer_id Buyer_Id_Field,
	buyer_first_name Buyer_FirstName_Field,
	buyer_last_name Buyer_LastName_Field) (
	buyer *Buyer, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__created_at_val := __now
	__updated_at_val := __now
	__id_val := buyer_id.value()
	__first_name_val := buyer_first_name.value()
	__last_name_val := buyer_last_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyers ( created_at, updated_at, id, first_name, last_name ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)

	__res, err := obj.driver.Exec(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastBuyer(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_Buyer(ctx context.Context,
	buyer_id Buyer_Id_Field,
	buyer_first_name Buyer_FirstName_Field,
	buyer_last_name Buyer_LastName_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__created_at_val := __now
	__updated_at_val := __now
	__id_val := buyer_id.value()
	__first_name_val := buyer_first_name.value()
	__last_name_val := buyer_last_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyers ( created_at, updated_at, id, first_name, last_name ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)

	_, err = obj.driver.Exec(__stmt, __created_at_val, __updated_at_val, __id_val, __first_name_val, __last_name_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_BuyerEmail(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
	buyer_email_address BuyerEmail_Address_Field,
	buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
	buyer_email_id BuyerEmail_Id_Field) (
	buyer_email *BuyerEmail, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_email_buyer_pk.value()
	__created_at_val := __now
	__address_val := buyer_email_address.value()
	__salted_hash_val := buyer_email_salted_hash.value()
	__id_val := buyer_email_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_emails ( buyer_pk, created_at, address, salted_hash, id ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)

	__res, err := obj.driver.Exec(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastBuyerEmail(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_BuyerEmail(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
	buyer_email_address BuyerEmail_Address_Field,
	buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
	buyer_email_id BuyerEmail_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_email_buyer_pk.value()
	__created_at_val := __now
	__address_val := buyer_email_address.value()
	__salted_hash_val := buyer_email_salted_hash.value()
	__id_val := buyer_email_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_emails ( buyer_pk, created_at, address, salted_hash, id ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)

	_, err = obj.driver.Exec(__stmt, __buyer_pk_val, __created_at_val, __address_val, __salted_hash_val, __id_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_Address(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field,
	address_street_address Address_StreetAddress_Field,
	address_city Address_City_Field,
	address_state Address_State_Field,
	address_zip Address_Zip_Field,
	address_is_billing Address_IsBilling_Field,
	address_id Address_Id_Field) (
	address *Address, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := address_buyer_pk.value()
	__created_at_val := __now
	__street_address_val := address_street_address.value()
	__city_val := address_city.value()
	__state_val := address_state.value()
	__zip_val := address_zip.value()
	__is_billing_val := address_is_billing.value()
	__id_val := address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO addresses ( buyer_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	__res, err := obj.driver.Exec(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastAddress(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_Address(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field,
	address_street_address Address_StreetAddress_Field,
	address_city Address_City_Field,
	address_state Address_State_Field,
	address_zip Address_Zip_Field,
	address_is_billing Address_IsBilling_Field,
	address_id Address_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := address_buyer_pk.value()
	__created_at_val := __now
	__street_address_val := address_street_address.value()
	__city_val := address_city.value()
	__state_val := address_state.value()
	__zip_val := address_zip.value()
	__is_billing_val := address_is_billing.value()
	__id_val := address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO addresses ( buyer_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	_, err = obj.driver.Exec(__stmt, __buyer_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_BuyerSession(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
	buyer_session_id BuyerSession_Id_Field) (
	buyer_session *BuyerSession, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_session_buyer_pk.value()
	__id_val := buyer_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_sessions ( buyer_pk, id, created_at ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __id_val, __created_at_val)

	__res, err := obj.driver.Exec(__stmt, __buyer_pk_val, __id_val, __created_at_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastBuyerSession(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_BuyerSession(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
	buyer_session_id BuyerSession_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__buyer_pk_val := buyer_session_buyer_pk.value()
	__id_val := buyer_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO buyer_sessions ( buyer_pk, id, created_at ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __buyer_pk_val, __id_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __buyer_pk_val, __id_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_Vendor(ctx context.Context,
	vendor_id Vendor_Id_Field,
	vendor_fein Vendor_Fein_Field) (
	vendor *Vendor, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_id.value()
	__created_at_val := __now
	__fein_val := vendor_fein.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendors ( id, created_at, fein ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __fein_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __created_at_val, __fein_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastVendor(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_Vendor(ctx context.Context,
	vendor_id Vendor_Id_Field,
	vendor_fein Vendor_Fein_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_id.value()
	__created_at_val := __now
	__fein_val := vendor_fein.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendors ( id, created_at, fein ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __fein_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __created_at_val, __fein_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_ExecutiveContact(ctx context.Context,
	executive_contact_id ExecutiveContact_Id_Field,
	executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
	executive_contact_first_name ExecutiveContact_FirstName_Field,
	executive_contact_last_name ExecutiveContact_LastName_Field) (
	executive_contact *ExecutiveContact, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := executive_contact_id.value()
	__vendor_pk_val := executive_contact_vendor_pk.value()
	__first_name_val := executive_contact_first_name.value()
	__last_name_val := executive_contact_last_name.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO executive_contacts ( id, vendor_pk, first_name, last_name, created_at ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastExecutiveContact(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_ExecutiveContact(ctx context.Context,
	executive_contact_id ExecutiveContact_Id_Field,
	executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
	executive_contact_first_name ExecutiveContact_FirstName_Field,
	executive_contact_last_name ExecutiveContact_LastName_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := executive_contact_id.value()
	__vendor_pk_val := executive_contact_vendor_pk.value()
	__first_name_val := executive_contact_first_name.value()
	__last_name_val := executive_contact_last_name.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO executive_contacts ( id, vendor_pk, first_name, last_name, created_at ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __first_name_val, __last_name_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_VendorEmail(ctx context.Context,
	vendor_email_id VendorEmail_Id_Field,
	vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
	vendor_email_address VendorEmail_Address_Field,
	vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
	vendor_email *VendorEmail, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_email_id.value()
	__executive_contact_pk_val := vendor_email_executive_contact_pk.value()
	__created_at_val := __now
	__address_val := vendor_email_address.value()
	__salted_hash_val := vendor_email_salted_hash.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_emails ( id, executive_contact_pk, created_at, address, salted_hash ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastVendorEmail(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_VendorEmail(ctx context.Context,
	vendor_email_id VendorEmail_Id_Field,
	vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
	vendor_email_address VendorEmail_Address_Field,
	vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := vendor_email_id.value()
	__executive_contact_pk_val := vendor_email_executive_contact_pk.value()
	__created_at_val := __now
	__address_val := vendor_email_address.value()
	__salted_hash_val := vendor_email_salted_hash.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_emails ( id, executive_contact_pk, created_at, address, salted_hash ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __executive_contact_pk_val, __created_at_val, __address_val, __salted_hash_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_VendorPhone(ctx context.Context,
	vendor_phone_id VendorPhone_Id_Field,
	vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
	vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
	vendor_phone_country_code VendorPhone_CountryCode_Field,
	vendor_phone_area_code VendorPhone_AreaCode_Field) (
	vendor_phone *VendorPhone, err error) {
	__id_val := vendor_phone_id.value()
	__executive_contact_pk_val := vendor_phone_executive_contact_pk.value()
	__phone_number_val := vendor_phone_phone_number.value()
	__country_code_val := vendor_phone_country_code.value()
	__area_code_val := vendor_phone_area_code.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_phones ( id, executive_contact_pk, phone_number, country_code, area_code ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastVendorPhone(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_VendorPhone(ctx context.Context,
	vendor_phone_id VendorPhone_Id_Field,
	vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
	vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
	vendor_phone_country_code VendorPhone_CountryCode_Field,
	vendor_phone_area_code VendorPhone_AreaCode_Field) (
	err error) {
	__id_val := vendor_phone_id.value()
	__executive_contact_pk_val := vendor_phone_executive_contact_pk.value()
	__phone_number_val := vendor_phone_phone_number.value()
	__country_code_val := vendor_phone_country_code.value()
	__area_code_val := vendor_phone_area_code.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_phones ( id, executive_contact_pk, phone_number, country_code, area_code ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __executive_contact_pk_val, __phone_number_val, __country_code_val, __area_code_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_VendorAddress(ctx context.Context,
	vendor_address_vendor_pk VendorAddress_VendorPk_Field,
	vendor_address_street_address VendorAddress_StreetAddress_Field,
	vendor_address_city VendorAddress_City_Field,
	vendor_address_state VendorAddress_State_Field,
	vendor_address_zip VendorAddress_Zip_Field,
	vendor_address_is_billing VendorAddress_IsBilling_Field,
	vendor_address_id VendorAddress_Id_Field) (
	vendor_address *VendorAddress, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_address_vendor_pk.value()
	__created_at_val := __now
	__street_address_val := vendor_address_street_address.value()
	__city_val := vendor_address_city.value()
	__state_val := vendor_address_state.value()
	__zip_val := vendor_address_zip.value()
	__is_billing_val := vendor_address_is_billing.value()
	__id_val := vendor_address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_addresses ( vendor_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	__res, err := obj.driver.Exec(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastVendorAddress(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_VendorAddress(ctx context.Context,
	vendor_address_vendor_pk VendorAddress_VendorPk_Field,
	vendor_address_street_address VendorAddress_StreetAddress_Field,
	vendor_address_city VendorAddress_City_Field,
	vendor_address_state VendorAddress_State_Field,
	vendor_address_zip VendorAddress_Zip_Field,
	vendor_address_is_billing VendorAddress_IsBilling_Field,
	vendor_address_id VendorAddress_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_address_vendor_pk.value()
	__created_at_val := __now
	__street_address_val := vendor_address_street_address.value()
	__city_val := vendor_address_city.value()
	__state_val := vendor_address_state.value()
	__zip_val := vendor_address_zip.value()
	__is_billing_val := vendor_address_is_billing.value()
	__id_val := vendor_address_id.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_addresses ( vendor_pk, created_at, street_address, city, state, zip, is_billing, id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)

	_, err = obj.driver.Exec(__stmt, __vendor_pk_val, __created_at_val, __street_address_val, __city_val, __state_val, __zip_val, __is_billing_val, __id_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_Product(ctx context.Context,
	product_id Product_Id_Field,
	product_vendor_pk Product_VendorPk_Field,
	product_price Product_Price_Field,
	product_discount Product_Discount_Field,
	product_discount_active Product_DiscountActive_Field,
	product_sku Product_Sku_Field,
	product_google_bucket_id Product_GoogleBucketId_Field,
	product_ladybug_approved Product_LadybugApproved_Field,
	product_product_active Product_ProductActive_Field,
	product_num_in_stock Product_NumInStock_Field,
	product_description Product_Description_Field,
	product_rating Product_Rating_Field) (
	product *Product, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := product_id.value()
	__vendor_pk_val := product_vendor_pk.value()
	__created_at_val := __now
	__price_val := product_price.value()
	__discount_val := product_discount.value()
	__discount_active_val := product_discount_active.value()
	__sku_val := product_sku.value()
	__google_bucket_id_val := product_google_bucket_id.value()
	__ladybug_approved_val := product_ladybug_approved.value()
	__product_active_val := product_product_active.value()
	__num_in_stock_val := product_num_in_stock.value()
	__description_val := product_description.value()
	__rating_val := product_rating.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO products ( id, vendor_pk, created_at, price, discount, discount_active, sku, google_bucket_id, ladybug_approved, product_active, num_in_stock, description, rating ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastProduct(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_Product(ctx context.Context,
	product_id Product_Id_Field,
	product_vendor_pk Product_VendorPk_Field,
	product_price Product_Price_Field,
	product_discount Product_Discount_Field,
	product_discount_active Product_DiscountActive_Field,
	product_sku Product_Sku_Field,
	product_google_bucket_id Product_GoogleBucketId_Field,
	product_ladybug_approved Product_LadybugApproved_Field,
	product_product_active Product_ProductActive_Field,
	product_num_in_stock Product_NumInStock_Field,
	product_description Product_Description_Field,
	product_rating Product_Rating_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := product_id.value()
	__vendor_pk_val := product_vendor_pk.value()
	__created_at_val := __now
	__price_val := product_price.value()
	__discount_val := product_discount.value()
	__discount_active_val := product_discount_active.value()
	__sku_val := product_sku.value()
	__google_bucket_id_val := product_google_bucket_id.value()
	__ladybug_approved_val := product_ladybug_approved.value()
	__product_active_val := product_product_active.value()
	__num_in_stock_val := product_num_in_stock.value()
	__description_val := product_description.value()
	__rating_val := product_rating.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO products ( id, vendor_pk, created_at, price, discount, discount_active, sku, google_bucket_id, ladybug_approved, product_active, num_in_stock, description, rating ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __created_at_val, __price_val, __discount_val, __discount_active_val, __sku_val, __google_bucket_id_val, __ladybug_approved_val, __product_active_val, __num_in_stock_val, __description_val, __rating_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_ProductReview(ctx context.Context,
	product_review_id ProductReview_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field,
	product_review_product_pk ProductReview_ProductPk_Field,
	product_review_rating ProductReview_Rating_Field,
	product_review_description ProductReview_Description_Field) (
	product_review *ProductReview, err error) {
	__id_val := product_review_id.value()
	__buyer_pk_val := product_review_buyer_pk.value()
	__product_pk_val := product_review_product_pk.value()
	__rating_val := product_review_rating.value()
	__description_val := product_review_description.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO product_reviews ( id, buyer_pk, product_pk, rating, description ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastProductReview(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_ProductReview(ctx context.Context,
	product_review_id ProductReview_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field,
	product_review_product_pk ProductReview_ProductPk_Field,
	product_review_rating ProductReview_Rating_Field,
	product_review_description ProductReview_Description_Field) (
	err error) {
	__id_val := product_review_id.value()
	__buyer_pk_val := product_review_buyer_pk.value()
	__product_pk_val := product_review_product_pk.value()
	__rating_val := product_review_rating.value()
	__description_val := product_review_description.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO product_reviews ( id, buyer_pk, product_pk, rating, description ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __buyer_pk_val, __product_pk_val, __rating_val, __description_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_TrialProduct(ctx context.Context,
	trial_product_id TrialProduct_Id_Field,
	trial_product_vendor_pk TrialProduct_VendorPk_Field,
	trial_product_buyer_pk TrialProduct_BuyerPk_Field,
	trial_product_product_pk TrialProduct_ProductPk_Field,
	trial_product_trial_price TrialProduct_TrialPrice_Field,
	trial_product_is_returned TrialProduct_IsReturned_Field) (
	trial_product *TrialProduct, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := trial_product_id.value()
	__vendor_pk_val := trial_product_vendor_pk.value()
	__buyer_pk_val := trial_product_buyer_pk.value()
	__product_pk_val := trial_product_product_pk.value()
	__created_at_val := __now
	__trial_price_val := trial_product_trial_price.value()
	__is_returned_val := trial_product_is_returned.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO trial_products ( id, vendor_pk, buyer_pk, product_pk, created_at, trial_price, is_returned ) VALUES ( ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __created_at_val, __trial_price_val, __is_returned_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __created_at_val, __trial_price_val, __is_returned_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastTrialProduct(ctx, __pk)

}

func (obj *sqlite3Impl) Create_PurchasedProduct(ctx context.Context,
	purchased_product_id PurchasedProduct_Id_Field,
	purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
	purchased_product_product_pk PurchasedProduct_ProductPk_Field,
	purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
	purchased_product *PurchasedProduct, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := purchased_product_id.value()
	__vendor_pk_val := purchased_product_vendor_pk.value()
	__buyer_pk_val := purchased_product_buyer_pk.value()
	__product_pk_val := purchased_product_product_pk.value()
	__purchase_price_val := purchased_product_purchase_price.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO purchased_products ( id, vendor_pk, buyer_pk, product_pk, purchase_price, created_at ) VALUES ( ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastPurchasedProduct(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_PurchasedProduct(ctx context.Context,
	purchased_product_id PurchasedProduct_Id_Field,
	purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
	purchased_product_product_pk PurchasedProduct_ProductPk_Field,
	purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := purchased_product_id.value()
	__vendor_pk_val := purchased_product_vendor_pk.value()
	__buyer_pk_val := purchased_product_buyer_pk.value()
	__product_pk_val := purchased_product_product_pk.value()
	__purchase_price_val := purchased_product_purchase_price.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO purchased_products ( id, vendor_pk, buyer_pk, product_pk, purchase_price, created_at ) VALUES ( ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __vendor_pk_val, __buyer_pk_val, __product_pk_val, __purchase_price_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_VendorSession(ctx context.Context,
	vendor_session_vendor_pk VendorSession_VendorPk_Field,
	vendor_session_id VendorSession_Id_Field) (
	vendor_session *VendorSession, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_session_vendor_pk.value()
	__id_val := vendor_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_sessions ( vendor_pk, id, created_at ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __id_val, __created_at_val)

	__res, err := obj.driver.Exec(__stmt, __vendor_pk_val, __id_val, __created_at_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastVendorSession(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_VendorSession(ctx context.Context,
	vendor_session_vendor_pk VendorSession_VendorPk_Field,
	vendor_session_id VendorSession_Id_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := vendor_session_vendor_pk.value()
	__id_val := vendor_session_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO vendor_sessions ( vendor_pk, id, created_at ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __id_val, __created_at_val)

	_, err = obj.driver.Exec(__stmt, __vendor_pk_val, __id_val, __created_at_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Create_Conversation(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field,
	conversation_buyer_unread Conversation_BuyerUnread_Field,
	conversation_vendor_unread Conversation_VendorUnread_Field,
	conversation_message_count Conversation_MessageCount_Field,
	conversation_id Conversation_Id_Field) (
	conversation *Conversation, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__vendor_pk_val := conversation_vendor_pk.value()
	__buyer_pk_val := conversation_buyer_pk.value()
	__buyer_unread_val := conversation_buyer_unread.value()
	__vendor_unread_val := conversation_vendor_unread.value()
	__message_count_val := conversation_message_count.value()
	__id_val := conversation_id.value()
	__created_at_val := __now

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO conversations ( vendor_pk, buyer_pk, buyer_unread, vendor_unread, message_count, id, created_at ) VALUES ( ?, ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __vendor_pk_val, __buyer_pk_val, __buyer_unread_val, __vendor_unread_val, __message_count_val, __id_val, __created_at_val)

	__res, err := obj.driver.Exec(__stmt, __vendor_pk_val, __buyer_pk_val, __buyer_unread_val, __vendor_unread_val, __message_count_val, __id_val, __created_at_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastConversation(ctx, __pk)

}

func (obj *sqlite3Impl) Create_Message(ctx context.Context,
	message_id Message_Id_Field,
	message_buyer_sent Message_BuyerSent_Field,
	message_description Message_Description_Field,
	message_conversation_pk Message_ConversationPk_Field,
	message_conversation_number Message_ConversationNumber_Field) (
	message *Message, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := message_id.value()
	__created_at_val := __now
	__buyer_sent_val := message_buyer_sent.value()
	__description_val := message_description.value()
	__conversation_pk_val := message_conversation_pk.value()
	__conversation_number_val := message_conversation_number.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO messages ( id, created_at, buyer_sent, description, conversation_pk, conversation_number ) VALUES ( ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)

	__res, err := obj.driver.Exec(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastMessage(ctx, __pk)

}

func (obj *sqlite3Impl) CreateNoReturn_Message(ctx context.Context,
	message_id Message_Id_Field,
	message_buyer_sent Message_BuyerSent_Field,
	message_description Message_Description_Field,
	message_conversation_pk Message_ConversationPk_Field,
	message_conversation_number Message_ConversationNumber_Field) (
	err error) {

	__now := obj.db.Hooks.Now().UTC()
	__id_val := message_id.value()
	__created_at_val := __now
	__buyer_sent_val := message_buyer_sent.value()
	__description_val := message_description.value()
	__conversation_pk_val := message_conversation_pk.value()
	__conversation_number_val := message_conversation_number.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO messages ( id, created_at, buyer_sent, description, conversation_pk, conversation_number ) VALUES ( ?, ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)

	_, err = obj.driver.Exec(__stmt, __id_val, __created_at_val, __buyer_sent_val, __description_val, __conversation_pk_val, __conversation_number_val)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil

}

func (obj *sqlite3Impl) Get_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field) (
	buyer *Buyer, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name FROM buyers WHERE buyers.pk = ?")

	var __values []interface{}
	__values = append(__values, buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil

}

func (obj *sqlite3Impl) Get_Buyer_Pk_By_Id(ctx context.Context,
	buyer_id Buyer_Id_Field) (
	row *Pk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk FROM buyers WHERE buyers.id = ?")

	var __values []interface{}
	__values = append(__values, buyer_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &Pk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *sqlite3Impl) Find_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field) (
	buyer *Buyer, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name FROM buyers WHERE buyers.pk = ?")

	var __values []interface{}
	__values = append(__values, buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil

}

func (obj *sqlite3Impl) All_BuyerEmail_By_BuyerPk(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field) (
	rows []*BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, buyer_email_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		buyer_email := &BuyerEmail{}
		err = __rows.Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, buyer_email)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Get_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field) (
	buyer_email *BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.address = ?")

	var __values []interface{}
	__values = append(__values, buyer_email_address.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil

}

func (obj *sqlite3Impl) Find_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field) (
	buyer_email *BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.address = ?")

	var __values []interface{}
	__values = append(__values, buyer_email_address.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil

}

func (obj *sqlite3Impl) All_Address_By_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, address_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		address := &Address{}
		err = __rows.Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, address)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Address_By_IsBilling_Equal_True_And_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.is_billing = 1 AND addresses.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, address_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		address := &Address{}
		err = __rows.Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, address)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Address_By_IsBilling_Equal_False_And_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.is_billing = 0 AND addresses.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, address_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		address := &Address{}
		err = __rows.Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, address)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Get_BuyerSession_BuyerPk_By_Id(ctx context.Context,
	buyer_session_id BuyerSession_Id_Field) (
	row *BuyerPk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.buyer_pk FROM buyer_sessions WHERE buyer_sessions.id = ?")

	var __values []interface{}
	__values = append(__values, buyer_session_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &BuyerPk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.BuyerPk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *sqlite3Impl) Get_BuyerSession_By_BuyerPk(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
	buyer_session *BuyerSession, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.pk, buyer_sessions.buyer_pk, buyer_sessions.id, buyer_sessions.created_at FROM buyer_sessions WHERE buyer_sessions.buyer_pk = ? LIMIT 2")

	var __values []interface{}
	__values = append(__values, buyer_session_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, makeErr(sql.ErrNoRows)
	}

	buyer_session = &BuyerSession{}
	err = __rows.Scan(&buyer_session.Pk, &buyer_session.BuyerPk, &buyer_session.Id, &buyer_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	if __rows.Next() {
		return nil, tooManyRows("BuyerSession_By_BuyerPk")
	}

	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}

	return buyer_session, nil

}

func (obj *sqlite3Impl) First_BuyerSession_By_BuyerPk(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
	buyer_session *BuyerSession, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.pk, buyer_sessions.buyer_pk, buyer_sessions.id, buyer_sessions.created_at FROM buyer_sessions WHERE buyer_sessions.buyer_pk = ? LIMIT 1 OFFSET 0")

	var __values []interface{}
	__values = append(__values, buyer_session_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, nil
	}

	buyer_session = &BuyerSession{}
	err = __rows.Scan(&buyer_session.Pk, &buyer_session.BuyerPk, &buyer_session.Id, &buyer_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	return buyer_session, nil

}

func (obj *sqlite3Impl) Get_Vendor_Pk_By_Id(ctx context.Context,
	vendor_id Vendor_Id_Field) (
	row *Pk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendors.pk FROM vendors WHERE vendors.id = ?")

	var __values []interface{}
	__values = append(__values, vendor_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &Pk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.Pk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *sqlite3Impl) Get_Product_Pk_Product_Price_By_Id(ctx context.Context,
	product_id Product_Id_Field) (
	row *Pk_Price_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.price FROM products WHERE products.id = ?")

	var __values []interface{}
	__values = append(__values, product_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &Pk_Price_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.Pk, &row.Price)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *sqlite3Impl) Get_Product_By_Id(ctx context.Context,
	product_id Product_Id_Field) (
	product *Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.id = ?")

	var __values []interface{}
	__values = append(__values, product_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	product = &Product{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product, nil

}

func (obj *sqlite3Impl) Paged_Product_By_ProductActive_Equal_True_And_LadybugApproved_Equal_True_And_NumInStock_Not_Number(ctx context.Context,
	limit int, ctoken string) (
	rows []*Product, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating, products.pk FROM products WHERE products.product_active = 1 AND products.ladybug_approved = 1 AND products.num_in_stock != 0 AND products.pk > ? ORDER BY products.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values)

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		product := &Product{}
		err = __rows.Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, product)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *sqlite3Impl) All_Product_By_ProductActive_Equal_True(ctx context.Context) (
	rows []*Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.product_active = 1")

	var __values []interface{}
	__values = append(__values)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		product := &Product{}
		err = __rows.Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, product)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Product_By_ProductActive_Equal_False_And_LadybugApproved_Equal_True(ctx context.Context) (
	rows []*Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.product_active = 0 AND products.ladybug_approved = 1")

	var __values []interface{}
	__values = append(__values)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		product := &Product{}
		err = __rows.Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, product)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Count_Product_By_ProductActive_Equal_False(ctx context.Context) (
	count int64, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT COUNT(*) FROM products WHERE products.product_active = 0")

	var __values []interface{}
	__values = append(__values)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&count)
	if err != nil {
		return 0, obj.makeErr(err)
	}

	return count, nil

}

func (obj *sqlite3Impl) Has_ProductReview_By_Product_Id_And_ProductReview_BuyerPk(ctx context.Context,
	product_id Product_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field) (
	has bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT EXISTS( SELECT 1 FROM products  JOIN product_reviews ON products.pk = product_reviews.product_pk WHERE products.id = ? AND product_reviews.buyer_pk = ? )")

	var __values []interface{}
	__values = append(__values, product_id.value(), product_review_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&has)
	if err != nil {
		return false, obj.makeErr(err)
	}
	return has, nil

}

func (obj *sqlite3Impl) Has_PurchasedProduct_By_BuyerPk(ctx context.Context,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field) (
	has bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT EXISTS( SELECT 1 FROM purchased_products WHERE purchased_products.buyer_pk = ? )")

	var __values []interface{}
	__values = append(__values, purchased_product_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&has)
	if err != nil {
		return false, obj.makeErr(err)
	}
	return has, nil

}

func (obj *sqlite3Impl) Get_VendorSession_VendorPk_By_Id(ctx context.Context,
	vendor_session_id VendorSession_Id_Field) (
	row *VendorPk_Row, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendor_sessions.vendor_pk FROM vendor_sessions WHERE vendor_sessions.id = ?")

	var __values []interface{}
	__values = append(__values, vendor_session_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	row = &VendorPk_Row{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&row.VendorPk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return row, nil

}

func (obj *sqlite3Impl) Get_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ? AND conversations.buyer_pk = ? LIMIT 2")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value(), conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, makeErr(sql.ErrNoRows)
	}

	conversation = &Conversation{}
	err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	if __rows.Next() {
		return nil, tooManyRows("Conversation_By_VendorPk_And_BuyerPk")
	}

	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}

	return conversation, nil

}

func (obj *sqlite3Impl) Get_Conversation_By_Id(ctx context.Context,
	conversation_id Conversation_Id_Field) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.id = ?")

	var __values []interface{}
	__values = append(__values, conversation_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	conversation = &Conversation{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return conversation, nil

}

func (obj *sqlite3Impl) Find_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ? AND conversations.buyer_pk = ? LIMIT 2")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value(), conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	if !__rows.Next() {
		if err := __rows.Err(); err != nil {
			return nil, obj.makeErr(err)
		}
		return nil, nil
	}

	conversation = &Conversation{}
	err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	if __rows.Next() {
		return nil, tooManyRows("Conversation_By_VendorPk_And_BuyerPk")
	}

	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}

	return conversation, nil

}

func (obj *sqlite3Impl) All_Conversation_By_VendorPk_And_VendorUnread_Equal_True(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ? AND conversations.vendor_unread = 1")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Conversation_By_BuyerPk_And_BuyerUnread_Equal_True(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.buyer_pk = ? AND conversations.buyer_unread = 1")

	var __values []interface{}
	__values = append(__values, conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Conversation_By_BuyerPk(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.buyer_pk = ?")

	var __values []interface{}
	__values = append(__values, conversation_buyer_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Conversation_By_VendorPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field) (
	rows []*Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.vendor_pk = ?")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Paged_Conversation_By_BuyerPk(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field,
	limit int, ctoken string) (
	rows []*Conversation, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at, conversations.pk FROM conversations WHERE conversations.buyer_pk = ? AND conversations.pk > ? ORDER BY conversations.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values, conversation_buyer_pk.value())

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *sqlite3Impl) Paged_Conversation_By_VendorPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	limit int, ctoken string) (
	rows []*Conversation, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at, conversations.pk FROM conversations WHERE conversations.vendor_pk = ? AND conversations.pk > ? ORDER BY conversations.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values, conversation_vendor_pk.value())

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		conversation := &Conversation{}
		err = __rows.Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, conversation)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *sqlite3Impl) Get_Message_By_Id(ctx context.Context,
	message_id Message_Id_Field) (
	message *Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE messages.id = ?")

	var __values []interface{}
	__values = append(__values, message_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	message = &Message{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return message, nil

}

func (obj *sqlite3Impl) All_Message_By_ConversationPk(ctx context.Context,
	message_conversation_pk Message_ConversationPk_Field) (
	rows []*Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE messages.conversation_pk = ?")

	var __values []interface{}
	__values = append(__values, message_conversation_pk.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		message := &Message{}
		err = __rows.Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, message)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Limited_Message_By_ConversationPk_OrderBy_Desc_CreatedAt(ctx context.Context,
	message_conversation_pk Message_ConversationPk_Field,
	limit int, offset int64) (
	rows []*Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE messages.conversation_pk = ? ORDER BY messages.created_at DESC LIMIT ? OFFSET ?")

	var __values []interface{}
	__values = append(__values, message_conversation_pk.value())

	__values = append(__values, limit, offset)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		message := &Message{}
		err = __rows.Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, message)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Update_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field,
	update Buyer_Update_Fields) (
	buyer *Buyer, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyers SET "), __sets, __sqlbundle_Literal(" WHERE buyers.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.FirstName._set {
		__values = append(__values, update.FirstName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("first_name = ?"))
	}

	if update.LastName._set {
		__values = append(__values, update.LastName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("last_name = ?"))
	}

	__now := obj.db.Hooks.Now().UTC()

	__values = append(__values, __now)
	__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("updated_at = ?"))

	__args = append(__args, buyer_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer = &Buyer{}
	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	var __embed_stmt_get = __sqlbundle_Literal("SELECT buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name FROM buyers WHERE buyers.pk = ?")

	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) "+__stmt_get, __args...)

	err = obj.driver.QueryRow(__stmt_get, __args...).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil
}

func (obj *sqlite3Impl) UpdateNoReturn_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field,
	update Buyer_Update_Fields) (
	err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyers SET "), __sets, __sqlbundle_Literal(" WHERE buyers.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.FirstName._set {
		__values = append(__values, update.FirstName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("first_name = ?"))
	}

	if update.LastName._set {
		__values = append(__values, update.LastName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("last_name = ?"))
	}

	__now := obj.db.Hooks.Now().UTC()

	__values = append(__values, __now)
	__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("updated_at = ?"))

	__args = append(__args, buyer_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil
}

func (obj *sqlite3Impl) Update_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field,
	update BuyerEmail_Update_Fields) (
	buyer_email *BuyerEmail, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyer_emails SET "), __sets, __sqlbundle_Literal(" WHERE buyer_emails.address = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Address._set {
		__values = append(__values, update.Address.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("address = ?"))
	}

	if update.SaltedHash._set {
		__values = append(__values, update.SaltedHash.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("salted_hash = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, buyer_email_address.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	buyer_email = &BuyerEmail{}
	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	var __embed_stmt_get = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE buyer_emails.address = ?")

	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) "+__stmt_get, __args...)

	err = obj.driver.QueryRow(__stmt_get, __args...).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil
}

func (obj *sqlite3Impl) UpdateNoReturn_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field,
	update BuyerEmail_Update_Fields) (
	err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE buyer_emails SET "), __sets, __sqlbundle_Literal(" WHERE buyer_emails.address = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Address._set {
		__values = append(__values, update.Address.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("address = ?"))
	}

	if update.SaltedHash._set {
		__values = append(__values, update.SaltedHash.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("salted_hash = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return emptyUpdate()
	}

	__args = append(__args, buyer_email_address.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil
}

func (obj *sqlite3Impl) Update_Address_By_Pk(ctx context.Context,
	address_pk Address_Pk_Field,
	update Address_Update_Fields) (
	address *Address, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE addresses SET "), __sets, __sqlbundle_Literal(" WHERE addresses.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.StreetAddress._set {
		__values = append(__values, update.StreetAddress.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("street_address = ?"))
	}

	if update.City._set {
		__values = append(__values, update.City.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("city = ?"))
	}

	if update.State._set {
		__values = append(__values, update.State.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("state = ?"))
	}

	if update.Zip._set {
		__values = append(__values, update.Zip.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("zip = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, address_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	address = &Address{}
	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	var __embed_stmt_get = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE addresses.pk = ?")

	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) "+__stmt_get, __args...)

	err = obj.driver.QueryRow(__stmt_get, __args...).Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return address, nil
}

func (obj *sqlite3Impl) Update_Product_By_Pk(ctx context.Context,
	product_pk Product_Pk_Field,
	update Product_Update_Fields) (
	product *Product, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE products SET "), __sets, __sqlbundle_Literal(" WHERE products.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Price._set {
		__values = append(__values, update.Price.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("price = ?"))
	}

	if update.Discount._set {
		__values = append(__values, update.Discount.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("discount = ?"))
	}

	if update.DiscountActive._set {
		__values = append(__values, update.DiscountActive.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("discount_active = ?"))
	}

	if update.Sku._set {
		__values = append(__values, update.Sku.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("sku = ?"))
	}

	if update.GoogleBucketId._set {
		__values = append(__values, update.GoogleBucketId.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("google_bucket_id = ?"))
	}

	if update.LadybugApproved._set {
		__values = append(__values, update.LadybugApproved.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("ladybug_approved = ?"))
	}

	if update.ProductActive._set {
		__values = append(__values, update.ProductActive.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("product_active = ?"))
	}

	if update.NumInStock._set {
		__values = append(__values, update.NumInStock.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("num_in_stock = ?"))
	}

	if update.Description._set {
		__values = append(__values, update.Description.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("description = ?"))
	}

	if update.Rating._set {
		__values = append(__values, update.Rating.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("rating = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, product_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	product = &Product{}
	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	var __embed_stmt_get = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE products.pk = ?")

	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) "+__stmt_get, __args...)

	err = obj.driver.QueryRow(__stmt_get, __args...).Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product, nil
}

func (obj *sqlite3Impl) Update_Conversation_By_Pk(ctx context.Context,
	conversation_pk Conversation_Pk_Field,
	update Conversation_Update_Fields) (
	conversation *Conversation, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE conversations SET "), __sets, __sqlbundle_Literal(" WHERE conversations.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.BuyerUnread._set {
		__values = append(__values, update.BuyerUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("buyer_unread = ?"))
	}

	if update.VendorUnread._set {
		__values = append(__values, update.VendorUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("vendor_unread = ?"))
	}

	if update.MessageCount._set {
		__values = append(__values, update.MessageCount.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("message_count = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, conversation_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	conversation = &Conversation{}
	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	var __embed_stmt_get = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE conversations.pk = ?")

	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) "+__stmt_get, __args...)

	err = obj.driver.QueryRow(__stmt_get, __args...).Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return conversation, nil
}

func (obj *sqlite3Impl) UpdateNoReturn_Conversation_By_Pk(ctx context.Context,
	conversation_pk Conversation_Pk_Field,
	update Conversation_Update_Fields) (
	err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE conversations SET "), __sets, __sqlbundle_Literal(" WHERE conversations.pk = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.BuyerUnread._set {
		__values = append(__values, update.BuyerUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("buyer_unread = ?"))
	}

	if update.VendorUnread._set {
		__values = append(__values, update.VendorUnread.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("vendor_unread = ?"))
	}

	if update.MessageCount._set {
		__values = append(__values, update.MessageCount.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("message_count = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return emptyUpdate()
	}

	__args = append(__args, conversation_pk.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return obj.makeErr(err)
	}
	return nil
}

func (obj *sqlite3Impl) getLastBuyer(ctx context.Context,
	pk int64) (
	buyer *Buyer, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyers.pk, buyers.created_at, buyers.updated_at, buyers.id, buyers.first_name, buyers.last_name FROM buyers WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	buyer = &Buyer{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&buyer.Pk, &buyer.CreatedAt, &buyer.UpdatedAt, &buyer.Id, &buyer.FirstName, &buyer.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer, nil

}

func (obj *sqlite3Impl) getLastBuyerEmail(ctx context.Context,
	pk int64) (
	buyer_email *BuyerEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_emails.pk, buyer_emails.buyer_pk, buyer_emails.created_at, buyer_emails.address, buyer_emails.salted_hash, buyer_emails.id FROM buyer_emails WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	buyer_email = &BuyerEmail{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&buyer_email.Pk, &buyer_email.BuyerPk, &buyer_email.CreatedAt, &buyer_email.Address, &buyer_email.SaltedHash, &buyer_email.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_email, nil

}

func (obj *sqlite3Impl) getLastAddress(ctx context.Context,
	pk int64) (
	address *Address, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT addresses.pk, addresses.buyer_pk, addresses.created_at, addresses.street_address, addresses.city, addresses.state, addresses.zip, addresses.is_billing, addresses.id FROM addresses WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	address = &Address{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&address.Pk, &address.BuyerPk, &address.CreatedAt, &address.StreetAddress, &address.City, &address.State, &address.Zip, &address.IsBilling, &address.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return address, nil

}

func (obj *sqlite3Impl) getLastBuyerSession(ctx context.Context,
	pk int64) (
	buyer_session *BuyerSession, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT buyer_sessions.pk, buyer_sessions.buyer_pk, buyer_sessions.id, buyer_sessions.created_at FROM buyer_sessions WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	buyer_session = &BuyerSession{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&buyer_session.Pk, &buyer_session.BuyerPk, &buyer_session.Id, &buyer_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return buyer_session, nil

}

func (obj *sqlite3Impl) getLastVendor(ctx context.Context,
	pk int64) (
	vendor *Vendor, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendors.pk, vendors.id, vendors.created_at, vendors.fein FROM vendors WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	vendor = &Vendor{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&vendor.Pk, &vendor.Id, &vendor.CreatedAt, &vendor.Fein)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor, nil

}

func (obj *sqlite3Impl) getLastExecutiveContact(ctx context.Context,
	pk int64) (
	executive_contact *ExecutiveContact, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT executive_contacts.pk, executive_contacts.id, executive_contacts.vendor_pk, executive_contacts.first_name, executive_contacts.last_name, executive_contacts.created_at FROM executive_contacts WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	executive_contact = &ExecutiveContact{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&executive_contact.Pk, &executive_contact.Id, &executive_contact.VendorPk, &executive_contact.FirstName, &executive_contact.LastName, &executive_contact.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return executive_contact, nil

}

func (obj *sqlite3Impl) getLastVendorEmail(ctx context.Context,
	pk int64) (
	vendor_email *VendorEmail, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendor_emails.pk, vendor_emails.id, vendor_emails.executive_contact_pk, vendor_emails.created_at, vendor_emails.address, vendor_emails.salted_hash FROM vendor_emails WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	vendor_email = &VendorEmail{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&vendor_email.Pk, &vendor_email.Id, &vendor_email.ExecutiveContactPk, &vendor_email.CreatedAt, &vendor_email.Address, &vendor_email.SaltedHash)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_email, nil

}

func (obj *sqlite3Impl) getLastVendorPhone(ctx context.Context,
	pk int64) (
	vendor_phone *VendorPhone, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendor_phones.pk, vendor_phones.id, vendor_phones.executive_contact_pk, vendor_phones.phone_number, vendor_phones.country_code, vendor_phones.area_code FROM vendor_phones WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	vendor_phone = &VendorPhone{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&vendor_phone.Pk, &vendor_phone.Id, &vendor_phone.ExecutiveContactPk, &vendor_phone.PhoneNumber, &vendor_phone.CountryCode, &vendor_phone.AreaCode)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_phone, nil

}

func (obj *sqlite3Impl) getLastVendorAddress(ctx context.Context,
	pk int64) (
	vendor_address *VendorAddress, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendor_addresses.pk, vendor_addresses.vendor_pk, vendor_addresses.created_at, vendor_addresses.street_address, vendor_addresses.city, vendor_addresses.state, vendor_addresses.zip, vendor_addresses.is_billing, vendor_addresses.id FROM vendor_addresses WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	vendor_address = &VendorAddress{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&vendor_address.Pk, &vendor_address.VendorPk, &vendor_address.CreatedAt, &vendor_address.StreetAddress, &vendor_address.City, &vendor_address.State, &vendor_address.Zip, &vendor_address.IsBilling, &vendor_address.Id)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_address, nil

}

func (obj *sqlite3Impl) getLastProduct(ctx context.Context,
	pk int64) (
	product *Product, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT products.pk, products.id, products.vendor_pk, products.created_at, products.price, products.discount, products.discount_active, products.sku, products.google_bucket_id, products.ladybug_approved, products.product_active, products.num_in_stock, products.description, products.rating FROM products WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	product = &Product{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&product.Pk, &product.Id, &product.VendorPk, &product.CreatedAt, &product.Price, &product.Discount, &product.DiscountActive, &product.Sku, &product.GoogleBucketId, &product.LadybugApproved, &product.ProductActive, &product.NumInStock, &product.Description, &product.Rating)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product, nil

}

func (obj *sqlite3Impl) getLastProductReview(ctx context.Context,
	pk int64) (
	product_review *ProductReview, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT product_reviews.pk, product_reviews.id, product_reviews.buyer_pk, product_reviews.product_pk, product_reviews.rating, product_reviews.description FROM product_reviews WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	product_review = &ProductReview{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&product_review.Pk, &product_review.Id, &product_review.BuyerPk, &product_review.ProductPk, &product_review.Rating, &product_review.Description)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return product_review, nil

}

func (obj *sqlite3Impl) getLastTrialProduct(ctx context.Context,
	pk int64) (
	trial_product *TrialProduct, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT trial_products.pk, trial_products.id, trial_products.vendor_pk, trial_products.buyer_pk, trial_products.product_pk, trial_products.created_at, trial_products.trial_price, trial_products.is_returned FROM trial_products WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	trial_product = &TrialProduct{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&trial_product.Pk, &trial_product.Id, &trial_product.VendorPk, &trial_product.BuyerPk, &trial_product.ProductPk, &trial_product.CreatedAt, &trial_product.TrialPrice, &trial_product.IsReturned)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return trial_product, nil

}

func (obj *sqlite3Impl) getLastPurchasedProduct(ctx context.Context,
	pk int64) (
	purchased_product *PurchasedProduct, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT purchased_products.pk, purchased_products.id, purchased_products.vendor_pk, purchased_products.buyer_pk, purchased_products.product_pk, purchased_products.purchase_price, purchased_products.created_at FROM purchased_products WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	purchased_product = &PurchasedProduct{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&purchased_product.Pk, &purchased_product.Id, &purchased_product.VendorPk, &purchased_product.BuyerPk, &purchased_product.ProductPk, &purchased_product.PurchasePrice, &purchased_product.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return purchased_product, nil

}

func (obj *sqlite3Impl) getLastVendorSession(ctx context.Context,
	pk int64) (
	vendor_session *VendorSession, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT vendor_sessions.pk, vendor_sessions.vendor_pk, vendor_sessions.id, vendor_sessions.created_at FROM vendor_sessions WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	vendor_session = &VendorSession{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&vendor_session.Pk, &vendor_session.VendorPk, &vendor_session.Id, &vendor_session.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return vendor_session, nil

}

func (obj *sqlite3Impl) getLastConversation(ctx context.Context,
	pk int64) (
	conversation *Conversation, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT conversations.pk, conversations.vendor_pk, conversations.buyer_pk, conversations.buyer_unread, conversations.vendor_unread, conversations.message_count, conversations.id, conversations.created_at FROM conversations WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	conversation = &Conversation{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&conversation.Pk, &conversation.VendorPk, &conversation.BuyerPk, &conversation.BuyerUnread, &conversation.VendorUnread, &conversation.MessageCount, &conversation.Id, &conversation.CreatedAt)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return conversation, nil

}

func (obj *sqlite3Impl) getLastMessage(ctx context.Context,
	pk int64) (
	message *Message, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT messages.pk, messages.id, messages.created_at, messages.buyer_sent, messages.description, messages.conversation_pk, messages.conversation_number FROM messages WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	message = &Message{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&message.Pk, &message.Id, &message.CreatedAt, &message.BuyerSent, &message.Description, &message.ConversationPk, &message.ConversationNumber)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return message, nil

}

func (impl sqlite3Impl) isConstraintError(err error) (
	constraint string, ok bool) {
	if e, ok := err.(sqlite3.Error); ok {
		if e.Code == sqlite3.ErrConstraint {
			msg := err.Error()
			colon := strings.LastIndex(msg, ":")
			if colon != -1 {
				return strings.TrimSpace(msg[colon:]), true
			}
			return "", true
		}
	}
	return "", false
}

func (obj *sqlite3Impl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.Exec("DELETE FROM vendor_sessions;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendor_phones;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendor_emails;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendor_addresses;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM vendors;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM trial_products;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM purchased_products;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM product_reviews;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM products;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM messages;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM executive_contacts;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM conversations;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM buyer_sessions;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM buyer_emails;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM buyers;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM addresses;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

type Rx struct {
	db *DB
	tx *Tx
}

func (rx *Rx) UnsafeTx(ctx context.Context) (unsafe_tx *sql.Tx, err error) {
	tx, err := rx.getTx(ctx)
	if err != nil {
		return nil, err
	}
	return tx.Tx, nil
}

func (rx *Rx) getTx(ctx context.Context) (tx *Tx, err error) {
	if rx.tx == nil {
		if rx.tx, err = rx.db.Open(ctx); err != nil {
			return nil, err
		}
	}
	return rx.tx, nil
}

func (rx *Rx) Rebind(s string) string {
	return rx.db.Rebind(s)
}

func (rx *Rx) Commit() (err error) {
	if rx.tx != nil {
		err = rx.tx.Commit()
		rx.tx = nil
	}
	return err
}

func (rx *Rx) Rollback() (err error) {
	if rx.tx != nil {
		err = rx.tx.Rollback()
		rx.tx = nil
	}
	return err
}

func (rx *Rx) All_Address_By_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Address_By_BuyerPk(ctx, address_buyer_pk)
}

func (rx *Rx) All_Address_By_IsBilling_Equal_False_And_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Address_By_IsBilling_Equal_False_And_BuyerPk(ctx, address_buyer_pk)
}

func (rx *Rx) All_Address_By_IsBilling_Equal_True_And_BuyerPk(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field) (
	rows []*Address, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Address_By_IsBilling_Equal_True_And_BuyerPk(ctx, address_buyer_pk)
}

func (rx *Rx) All_BuyerEmail_By_BuyerPk(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field) (
	rows []*BuyerEmail, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_BuyerEmail_By_BuyerPk(ctx, buyer_email_buyer_pk)
}

func (rx *Rx) All_Conversation_By_BuyerPk(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	rows []*Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Conversation_By_BuyerPk(ctx, conversation_buyer_pk)
}

func (rx *Rx) All_Conversation_By_BuyerPk_And_BuyerUnread_Equal_True(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	rows []*Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Conversation_By_BuyerPk_And_BuyerUnread_Equal_True(ctx, conversation_buyer_pk)
}

func (rx *Rx) All_Conversation_By_VendorPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field) (
	rows []*Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Conversation_By_VendorPk(ctx, conversation_vendor_pk)
}

func (rx *Rx) All_Conversation_By_VendorPk_And_VendorUnread_Equal_True(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field) (
	rows []*Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Conversation_By_VendorPk_And_VendorUnread_Equal_True(ctx, conversation_vendor_pk)
}

func (rx *Rx) All_Message_By_ConversationPk(ctx context.Context,
	message_conversation_pk Message_ConversationPk_Field) (
	rows []*Message, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Message_By_ConversationPk(ctx, message_conversation_pk)
}

func (rx *Rx) All_Product_By_ProductActive_Equal_False_And_LadybugApproved_Equal_True(ctx context.Context) (
	rows []*Product, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Product_By_ProductActive_Equal_False_And_LadybugApproved_Equal_True(ctx)
}

func (rx *Rx) All_Product_By_ProductActive_Equal_True(ctx context.Context) (
	rows []*Product, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Product_By_ProductActive_Equal_True(ctx)
}

func (rx *Rx) Count_Product_By_ProductActive_Equal_False(ctx context.Context) (
	count int64, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Count_Product_By_ProductActive_Equal_False(ctx)
}

func (rx *Rx) CreateNoReturn_Address(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field,
	address_street_address Address_StreetAddress_Field,
	address_city Address_City_Field,
	address_state Address_State_Field,
	address_zip Address_Zip_Field,
	address_is_billing Address_IsBilling_Field,
	address_id Address_Id_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_Address(ctx, address_buyer_pk, address_street_address, address_city, address_state, address_zip, address_is_billing, address_id)

}

func (rx *Rx) CreateNoReturn_Buyer(ctx context.Context,
	buyer_id Buyer_Id_Field,
	buyer_first_name Buyer_FirstName_Field,
	buyer_last_name Buyer_LastName_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_Buyer(ctx, buyer_id, buyer_first_name, buyer_last_name)

}

func (rx *Rx) CreateNoReturn_BuyerEmail(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
	buyer_email_address BuyerEmail_Address_Field,
	buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
	buyer_email_id BuyerEmail_Id_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_BuyerEmail(ctx, buyer_email_buyer_pk, buyer_email_address, buyer_email_salted_hash, buyer_email_id)

}

func (rx *Rx) CreateNoReturn_BuyerSession(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
	buyer_session_id BuyerSession_Id_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_BuyerSession(ctx, buyer_session_buyer_pk, buyer_session_id)

}

func (rx *Rx) CreateNoReturn_ExecutiveContact(ctx context.Context,
	executive_contact_id ExecutiveContact_Id_Field,
	executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
	executive_contact_first_name ExecutiveContact_FirstName_Field,
	executive_contact_last_name ExecutiveContact_LastName_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_ExecutiveContact(ctx, executive_contact_id, executive_contact_vendor_pk, executive_contact_first_name, executive_contact_last_name)

}

func (rx *Rx) CreateNoReturn_Message(ctx context.Context,
	message_id Message_Id_Field,
	message_buyer_sent Message_BuyerSent_Field,
	message_description Message_Description_Field,
	message_conversation_pk Message_ConversationPk_Field,
	message_conversation_number Message_ConversationNumber_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_Message(ctx, message_id, message_buyer_sent, message_description, message_conversation_pk, message_conversation_number)

}

func (rx *Rx) CreateNoReturn_Product(ctx context.Context,
	product_id Product_Id_Field,
	product_vendor_pk Product_VendorPk_Field,
	product_price Product_Price_Field,
	product_discount Product_Discount_Field,
	product_discount_active Product_DiscountActive_Field,
	product_sku Product_Sku_Field,
	product_google_bucket_id Product_GoogleBucketId_Field,
	product_ladybug_approved Product_LadybugApproved_Field,
	product_product_active Product_ProductActive_Field,
	product_num_in_stock Product_NumInStock_Field,
	product_description Product_Description_Field,
	product_rating Product_Rating_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_Product(ctx, product_id, product_vendor_pk, product_price, product_discount, product_discount_active, product_sku, product_google_bucket_id, product_ladybug_approved, product_product_active, product_num_in_stock, product_description, product_rating)

}

func (rx *Rx) CreateNoReturn_ProductReview(ctx context.Context,
	product_review_id ProductReview_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field,
	product_review_product_pk ProductReview_ProductPk_Field,
	product_review_rating ProductReview_Rating_Field,
	product_review_description ProductReview_Description_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_ProductReview(ctx, product_review_id, product_review_buyer_pk, product_review_product_pk, product_review_rating, product_review_description)

}

func (rx *Rx) CreateNoReturn_PurchasedProduct(ctx context.Context,
	purchased_product_id PurchasedProduct_Id_Field,
	purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
	purchased_product_product_pk PurchasedProduct_ProductPk_Field,
	purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_PurchasedProduct(ctx, purchased_product_id, purchased_product_vendor_pk, purchased_product_buyer_pk, purchased_product_product_pk, purchased_product_purchase_price)

}

func (rx *Rx) CreateNoReturn_Vendor(ctx context.Context,
	vendor_id Vendor_Id_Field,
	vendor_fein Vendor_Fein_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_Vendor(ctx, vendor_id, vendor_fein)

}

func (rx *Rx) CreateNoReturn_VendorAddress(ctx context.Context,
	vendor_address_vendor_pk VendorAddress_VendorPk_Field,
	vendor_address_street_address VendorAddress_StreetAddress_Field,
	vendor_address_city VendorAddress_City_Field,
	vendor_address_state VendorAddress_State_Field,
	vendor_address_zip VendorAddress_Zip_Field,
	vendor_address_is_billing VendorAddress_IsBilling_Field,
	vendor_address_id VendorAddress_Id_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_VendorAddress(ctx, vendor_address_vendor_pk, vendor_address_street_address, vendor_address_city, vendor_address_state, vendor_address_zip, vendor_address_is_billing, vendor_address_id)

}

func (rx *Rx) CreateNoReturn_VendorEmail(ctx context.Context,
	vendor_email_id VendorEmail_Id_Field,
	vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
	vendor_email_address VendorEmail_Address_Field,
	vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_VendorEmail(ctx, vendor_email_id, vendor_email_executive_contact_pk, vendor_email_address, vendor_email_salted_hash)

}

func (rx *Rx) CreateNoReturn_VendorPhone(ctx context.Context,
	vendor_phone_id VendorPhone_Id_Field,
	vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
	vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
	vendor_phone_country_code VendorPhone_CountryCode_Field,
	vendor_phone_area_code VendorPhone_AreaCode_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_VendorPhone(ctx, vendor_phone_id, vendor_phone_executive_contact_pk, vendor_phone_phone_number, vendor_phone_country_code, vendor_phone_area_code)

}

func (rx *Rx) CreateNoReturn_VendorSession(ctx context.Context,
	vendor_session_vendor_pk VendorSession_VendorPk_Field,
	vendor_session_id VendorSession_Id_Field) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.CreateNoReturn_VendorSession(ctx, vendor_session_vendor_pk, vendor_session_id)

}

func (rx *Rx) Create_Address(ctx context.Context,
	address_buyer_pk Address_BuyerPk_Field,
	address_street_address Address_StreetAddress_Field,
	address_city Address_City_Field,
	address_state Address_State_Field,
	address_zip Address_Zip_Field,
	address_is_billing Address_IsBilling_Field,
	address_id Address_Id_Field) (
	address *Address, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Address(ctx, address_buyer_pk, address_street_address, address_city, address_state, address_zip, address_is_billing, address_id)

}

func (rx *Rx) Create_Buyer(ctx context.Context,
	buyer_id Buyer_Id_Field,
	buyer_first_name Buyer_FirstName_Field,
	buyer_last_name Buyer_LastName_Field) (
	buyer *Buyer, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Buyer(ctx, buyer_id, buyer_first_name, buyer_last_name)

}

func (rx *Rx) Create_BuyerEmail(ctx context.Context,
	buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
	buyer_email_address BuyerEmail_Address_Field,
	buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
	buyer_email_id BuyerEmail_Id_Field) (
	buyer_email *BuyerEmail, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_BuyerEmail(ctx, buyer_email_buyer_pk, buyer_email_address, buyer_email_salted_hash, buyer_email_id)

}

func (rx *Rx) Create_BuyerSession(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
	buyer_session_id BuyerSession_Id_Field) (
	buyer_session *BuyerSession, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_BuyerSession(ctx, buyer_session_buyer_pk, buyer_session_id)

}

func (rx *Rx) Create_Conversation(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field,
	conversation_buyer_unread Conversation_BuyerUnread_Field,
	conversation_vendor_unread Conversation_VendorUnread_Field,
	conversation_message_count Conversation_MessageCount_Field,
	conversation_id Conversation_Id_Field) (
	conversation *Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Conversation(ctx, conversation_vendor_pk, conversation_buyer_pk, conversation_buyer_unread, conversation_vendor_unread, conversation_message_count, conversation_id)

}

func (rx *Rx) Create_ExecutiveContact(ctx context.Context,
	executive_contact_id ExecutiveContact_Id_Field,
	executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
	executive_contact_first_name ExecutiveContact_FirstName_Field,
	executive_contact_last_name ExecutiveContact_LastName_Field) (
	executive_contact *ExecutiveContact, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_ExecutiveContact(ctx, executive_contact_id, executive_contact_vendor_pk, executive_contact_first_name, executive_contact_last_name)

}

func (rx *Rx) Create_Message(ctx context.Context,
	message_id Message_Id_Field,
	message_buyer_sent Message_BuyerSent_Field,
	message_description Message_Description_Field,
	message_conversation_pk Message_ConversationPk_Field,
	message_conversation_number Message_ConversationNumber_Field) (
	message *Message, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Message(ctx, message_id, message_buyer_sent, message_description, message_conversation_pk, message_conversation_number)

}

func (rx *Rx) Create_Product(ctx context.Context,
	product_id Product_Id_Field,
	product_vendor_pk Product_VendorPk_Field,
	product_price Product_Price_Field,
	product_discount Product_Discount_Field,
	product_discount_active Product_DiscountActive_Field,
	product_sku Product_Sku_Field,
	product_google_bucket_id Product_GoogleBucketId_Field,
	product_ladybug_approved Product_LadybugApproved_Field,
	product_product_active Product_ProductActive_Field,
	product_num_in_stock Product_NumInStock_Field,
	product_description Product_Description_Field,
	product_rating Product_Rating_Field) (
	product *Product, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Product(ctx, product_id, product_vendor_pk, product_price, product_discount, product_discount_active, product_sku, product_google_bucket_id, product_ladybug_approved, product_product_active, product_num_in_stock, product_description, product_rating)

}

func (rx *Rx) Create_ProductReview(ctx context.Context,
	product_review_id ProductReview_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field,
	product_review_product_pk ProductReview_ProductPk_Field,
	product_review_rating ProductReview_Rating_Field,
	product_review_description ProductReview_Description_Field) (
	product_review *ProductReview, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_ProductReview(ctx, product_review_id, product_review_buyer_pk, product_review_product_pk, product_review_rating, product_review_description)

}

func (rx *Rx) Create_PurchasedProduct(ctx context.Context,
	purchased_product_id PurchasedProduct_Id_Field,
	purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
	purchased_product_product_pk PurchasedProduct_ProductPk_Field,
	purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
	purchased_product *PurchasedProduct, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_PurchasedProduct(ctx, purchased_product_id, purchased_product_vendor_pk, purchased_product_buyer_pk, purchased_product_product_pk, purchased_product_purchase_price)

}

func (rx *Rx) Create_TrialProduct(ctx context.Context,
	trial_product_id TrialProduct_Id_Field,
	trial_product_vendor_pk TrialProduct_VendorPk_Field,
	trial_product_buyer_pk TrialProduct_BuyerPk_Field,
	trial_product_product_pk TrialProduct_ProductPk_Field,
	trial_product_trial_price TrialProduct_TrialPrice_Field,
	trial_product_is_returned TrialProduct_IsReturned_Field) (
	trial_product *TrialProduct, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_TrialProduct(ctx, trial_product_id, trial_product_vendor_pk, trial_product_buyer_pk, trial_product_product_pk, trial_product_trial_price, trial_product_is_returned)

}

func (rx *Rx) Create_Vendor(ctx context.Context,
	vendor_id Vendor_Id_Field,
	vendor_fein Vendor_Fein_Field) (
	vendor *Vendor, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Vendor(ctx, vendor_id, vendor_fein)

}

func (rx *Rx) Create_VendorAddress(ctx context.Context,
	vendor_address_vendor_pk VendorAddress_VendorPk_Field,
	vendor_address_street_address VendorAddress_StreetAddress_Field,
	vendor_address_city VendorAddress_City_Field,
	vendor_address_state VendorAddress_State_Field,
	vendor_address_zip VendorAddress_Zip_Field,
	vendor_address_is_billing VendorAddress_IsBilling_Field,
	vendor_address_id VendorAddress_Id_Field) (
	vendor_address *VendorAddress, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_VendorAddress(ctx, vendor_address_vendor_pk, vendor_address_street_address, vendor_address_city, vendor_address_state, vendor_address_zip, vendor_address_is_billing, vendor_address_id)

}

func (rx *Rx) Create_VendorEmail(ctx context.Context,
	vendor_email_id VendorEmail_Id_Field,
	vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
	vendor_email_address VendorEmail_Address_Field,
	vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
	vendor_email *VendorEmail, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_VendorEmail(ctx, vendor_email_id, vendor_email_executive_contact_pk, vendor_email_address, vendor_email_salted_hash)

}

func (rx *Rx) Create_VendorPhone(ctx context.Context,
	vendor_phone_id VendorPhone_Id_Field,
	vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
	vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
	vendor_phone_country_code VendorPhone_CountryCode_Field,
	vendor_phone_area_code VendorPhone_AreaCode_Field) (
	vendor_phone *VendorPhone, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_VendorPhone(ctx, vendor_phone_id, vendor_phone_executive_contact_pk, vendor_phone_phone_number, vendor_phone_country_code, vendor_phone_area_code)

}

func (rx *Rx) Create_VendorSession(ctx context.Context,
	vendor_session_vendor_pk VendorSession_VendorPk_Field,
	vendor_session_id VendorSession_Id_Field) (
	vendor_session *VendorSession, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_VendorSession(ctx, vendor_session_vendor_pk, vendor_session_id)

}

func (rx *Rx) Find_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field) (
	buyer_email *BuyerEmail, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Find_BuyerEmail_By_Address(ctx, buyer_email_address)
}

func (rx *Rx) Find_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field) (
	buyer *Buyer, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Find_Buyer_By_Pk(ctx, buyer_pk)
}

func (rx *Rx) Find_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	conversation *Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Find_Conversation_By_VendorPk_And_BuyerPk(ctx, conversation_vendor_pk, conversation_buyer_pk)
}

func (rx *Rx) First_BuyerSession_By_BuyerPk(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
	buyer_session *BuyerSession, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.First_BuyerSession_By_BuyerPk(ctx, buyer_session_buyer_pk)
}

func (rx *Rx) Get_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field) (
	buyer_email *BuyerEmail, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_BuyerEmail_By_Address(ctx, buyer_email_address)
}

func (rx *Rx) Get_BuyerSession_BuyerPk_By_Id(ctx context.Context,
	buyer_session_id BuyerSession_Id_Field) (
	row *BuyerPk_Row, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_BuyerSession_BuyerPk_By_Id(ctx, buyer_session_id)
}

func (rx *Rx) Get_BuyerSession_By_BuyerPk(ctx context.Context,
	buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
	buyer_session *BuyerSession, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_BuyerSession_By_BuyerPk(ctx, buyer_session_buyer_pk)
}

func (rx *Rx) Get_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field) (
	buyer *Buyer, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Buyer_By_Pk(ctx, buyer_pk)
}

func (rx *Rx) Get_Buyer_Pk_By_Id(ctx context.Context,
	buyer_id Buyer_Id_Field) (
	row *Pk_Row, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Buyer_Pk_By_Id(ctx, buyer_id)
}

func (rx *Rx) Get_Conversation_By_Id(ctx context.Context,
	conversation_id Conversation_Id_Field) (
	conversation *Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Conversation_By_Id(ctx, conversation_id)
}

func (rx *Rx) Get_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	conversation_buyer_pk Conversation_BuyerPk_Field) (
	conversation *Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Conversation_By_VendorPk_And_BuyerPk(ctx, conversation_vendor_pk, conversation_buyer_pk)
}

func (rx *Rx) Get_Message_By_Id(ctx context.Context,
	message_id Message_Id_Field) (
	message *Message, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Message_By_Id(ctx, message_id)
}

func (rx *Rx) Get_Product_By_Id(ctx context.Context,
	product_id Product_Id_Field) (
	product *Product, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Product_By_Id(ctx, product_id)
}

func (rx *Rx) Get_Product_Pk_Product_Price_By_Id(ctx context.Context,
	product_id Product_Id_Field) (
	row *Pk_Price_Row, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Product_Pk_Product_Price_By_Id(ctx, product_id)
}

func (rx *Rx) Get_VendorSession_VendorPk_By_Id(ctx context.Context,
	vendor_session_id VendorSession_Id_Field) (
	row *VendorPk_Row, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_VendorSession_VendorPk_By_Id(ctx, vendor_session_id)
}

func (rx *Rx) Get_Vendor_Pk_By_Id(ctx context.Context,
	vendor_id Vendor_Id_Field) (
	row *Pk_Row, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Vendor_Pk_By_Id(ctx, vendor_id)
}

func (rx *Rx) Has_ProductReview_By_Product_Id_And_ProductReview_BuyerPk(ctx context.Context,
	product_id Product_Id_Field,
	product_review_buyer_pk ProductReview_BuyerPk_Field) (
	has bool, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Has_ProductReview_By_Product_Id_And_ProductReview_BuyerPk(ctx, product_id, product_review_buyer_pk)
}

func (rx *Rx) Has_PurchasedProduct_By_BuyerPk(ctx context.Context,
	purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field) (
	has bool, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Has_PurchasedProduct_By_BuyerPk(ctx, purchased_product_buyer_pk)
}

func (rx *Rx) Limited_Message_By_ConversationPk_OrderBy_Desc_CreatedAt(ctx context.Context,
	message_conversation_pk Message_ConversationPk_Field,
	limit int, offset int64) (
	rows []*Message, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Limited_Message_By_ConversationPk_OrderBy_Desc_CreatedAt(ctx, message_conversation_pk, limit, offset)
}

func (rx *Rx) Paged_Conversation_By_BuyerPk(ctx context.Context,
	conversation_buyer_pk Conversation_BuyerPk_Field,
	limit int, ctoken string) (
	rows []*Conversation, ctokenout string, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Paged_Conversation_By_BuyerPk(ctx, conversation_buyer_pk, limit, ctoken)
}

func (rx *Rx) Paged_Conversation_By_VendorPk(ctx context.Context,
	conversation_vendor_pk Conversation_VendorPk_Field,
	limit int, ctoken string) (
	rows []*Conversation, ctokenout string, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Paged_Conversation_By_VendorPk(ctx, conversation_vendor_pk, limit, ctoken)
}

func (rx *Rx) Paged_Product_By_ProductActive_Equal_True_And_LadybugApproved_Equal_True_And_NumInStock_Not_Number(ctx context.Context,
	limit int, ctoken string) (
	rows []*Product, ctokenout string, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Paged_Product_By_ProductActive_Equal_True_And_LadybugApproved_Equal_True_And_NumInStock_Not_Number(ctx, limit, ctoken)
}

func (rx *Rx) UpdateNoReturn_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field,
	update BuyerEmail_Update_Fields) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.UpdateNoReturn_BuyerEmail_By_Address(ctx, buyer_email_address, update)
}

func (rx *Rx) UpdateNoReturn_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field,
	update Buyer_Update_Fields) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.UpdateNoReturn_Buyer_By_Pk(ctx, buyer_pk, update)
}

func (rx *Rx) UpdateNoReturn_Conversation_By_Pk(ctx context.Context,
	conversation_pk Conversation_Pk_Field,
	update Conversation_Update_Fields) (
	err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.UpdateNoReturn_Conversation_By_Pk(ctx, conversation_pk, update)
}

func (rx *Rx) Update_Address_By_Pk(ctx context.Context,
	address_pk Address_Pk_Field,
	update Address_Update_Fields) (
	address *Address, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Update_Address_By_Pk(ctx, address_pk, update)
}

func (rx *Rx) Update_BuyerEmail_By_Address(ctx context.Context,
	buyer_email_address BuyerEmail_Address_Field,
	update BuyerEmail_Update_Fields) (
	buyer_email *BuyerEmail, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Update_BuyerEmail_By_Address(ctx, buyer_email_address, update)
}

func (rx *Rx) Update_Buyer_By_Pk(ctx context.Context,
	buyer_pk Buyer_Pk_Field,
	update Buyer_Update_Fields) (
	buyer *Buyer, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Update_Buyer_By_Pk(ctx, buyer_pk, update)
}

func (rx *Rx) Update_Conversation_By_Pk(ctx context.Context,
	conversation_pk Conversation_Pk_Field,
	update Conversation_Update_Fields) (
	conversation *Conversation, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Update_Conversation_By_Pk(ctx, conversation_pk, update)
}

func (rx *Rx) Update_Product_By_Pk(ctx context.Context,
	product_pk Product_Pk_Field,
	update Product_Update_Fields) (
	product *Product, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Update_Product_By_Pk(ctx, product_pk, update)
}

type Methods interface {
	All_Address_By_BuyerPk(ctx context.Context,
		address_buyer_pk Address_BuyerPk_Field) (
		rows []*Address, err error)

	All_Address_By_IsBilling_Equal_False_And_BuyerPk(ctx context.Context,
		address_buyer_pk Address_BuyerPk_Field) (
		rows []*Address, err error)

	All_Address_By_IsBilling_Equal_True_And_BuyerPk(ctx context.Context,
		address_buyer_pk Address_BuyerPk_Field) (
		rows []*Address, err error)

	All_BuyerEmail_By_BuyerPk(ctx context.Context,
		buyer_email_buyer_pk BuyerEmail_BuyerPk_Field) (
		rows []*BuyerEmail, err error)

	All_Conversation_By_BuyerPk(ctx context.Context,
		conversation_buyer_pk Conversation_BuyerPk_Field) (
		rows []*Conversation, err error)

	All_Conversation_By_BuyerPk_And_BuyerUnread_Equal_True(ctx context.Context,
		conversation_buyer_pk Conversation_BuyerPk_Field) (
		rows []*Conversation, err error)

	All_Conversation_By_VendorPk(ctx context.Context,
		conversation_vendor_pk Conversation_VendorPk_Field) (
		rows []*Conversation, err error)

	All_Conversation_By_VendorPk_And_VendorUnread_Equal_True(ctx context.Context,
		conversation_vendor_pk Conversation_VendorPk_Field) (
		rows []*Conversation, err error)

	All_Message_By_ConversationPk(ctx context.Context,
		message_conversation_pk Message_ConversationPk_Field) (
		rows []*Message, err error)

	All_Product_By_ProductActive_Equal_False_And_LadybugApproved_Equal_True(ctx context.Context) (
		rows []*Product, err error)

	All_Product_By_ProductActive_Equal_True(ctx context.Context) (
		rows []*Product, err error)

	Count_Product_By_ProductActive_Equal_False(ctx context.Context) (
		count int64, err error)

	CreateNoReturn_Address(ctx context.Context,
		address_buyer_pk Address_BuyerPk_Field,
		address_street_address Address_StreetAddress_Field,
		address_city Address_City_Field,
		address_state Address_State_Field,
		address_zip Address_Zip_Field,
		address_is_billing Address_IsBilling_Field,
		address_id Address_Id_Field) (
		err error)

	CreateNoReturn_Buyer(ctx context.Context,
		buyer_id Buyer_Id_Field,
		buyer_first_name Buyer_FirstName_Field,
		buyer_last_name Buyer_LastName_Field) (
		err error)

	CreateNoReturn_BuyerEmail(ctx context.Context,
		buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
		buyer_email_address BuyerEmail_Address_Field,
		buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
		buyer_email_id BuyerEmail_Id_Field) (
		err error)

	CreateNoReturn_BuyerSession(ctx context.Context,
		buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
		buyer_session_id BuyerSession_Id_Field) (
		err error)

	CreateNoReturn_ExecutiveContact(ctx context.Context,
		executive_contact_id ExecutiveContact_Id_Field,
		executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
		executive_contact_first_name ExecutiveContact_FirstName_Field,
		executive_contact_last_name ExecutiveContact_LastName_Field) (
		err error)

	CreateNoReturn_Message(ctx context.Context,
		message_id Message_Id_Field,
		message_buyer_sent Message_BuyerSent_Field,
		message_description Message_Description_Field,
		message_conversation_pk Message_ConversationPk_Field,
		message_conversation_number Message_ConversationNumber_Field) (
		err error)

	CreateNoReturn_Product(ctx context.Context,
		product_id Product_Id_Field,
		product_vendor_pk Product_VendorPk_Field,
		product_price Product_Price_Field,
		product_discount Product_Discount_Field,
		product_discount_active Product_DiscountActive_Field,
		product_sku Product_Sku_Field,
		product_google_bucket_id Product_GoogleBucketId_Field,
		product_ladybug_approved Product_LadybugApproved_Field,
		product_product_active Product_ProductActive_Field,
		product_num_in_stock Product_NumInStock_Field,
		product_description Product_Description_Field,
		product_rating Product_Rating_Field) (
		err error)

	CreateNoReturn_ProductReview(ctx context.Context,
		product_review_id ProductReview_Id_Field,
		product_review_buyer_pk ProductReview_BuyerPk_Field,
		product_review_product_pk ProductReview_ProductPk_Field,
		product_review_rating ProductReview_Rating_Field,
		product_review_description ProductReview_Description_Field) (
		err error)

	CreateNoReturn_PurchasedProduct(ctx context.Context,
		purchased_product_id PurchasedProduct_Id_Field,
		purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
		purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
		purchased_product_product_pk PurchasedProduct_ProductPk_Field,
		purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
		err error)

	CreateNoReturn_Vendor(ctx context.Context,
		vendor_id Vendor_Id_Field,
		vendor_fein Vendor_Fein_Field) (
		err error)

	CreateNoReturn_VendorAddress(ctx context.Context,
		vendor_address_vendor_pk VendorAddress_VendorPk_Field,
		vendor_address_street_address VendorAddress_StreetAddress_Field,
		vendor_address_city VendorAddress_City_Field,
		vendor_address_state VendorAddress_State_Field,
		vendor_address_zip VendorAddress_Zip_Field,
		vendor_address_is_billing VendorAddress_IsBilling_Field,
		vendor_address_id VendorAddress_Id_Field) (
		err error)

	CreateNoReturn_VendorEmail(ctx context.Context,
		vendor_email_id VendorEmail_Id_Field,
		vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
		vendor_email_address VendorEmail_Address_Field,
		vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
		err error)

	CreateNoReturn_VendorPhone(ctx context.Context,
		vendor_phone_id VendorPhone_Id_Field,
		vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
		vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
		vendor_phone_country_code VendorPhone_CountryCode_Field,
		vendor_phone_area_code VendorPhone_AreaCode_Field) (
		err error)

	CreateNoReturn_VendorSession(ctx context.Context,
		vendor_session_vendor_pk VendorSession_VendorPk_Field,
		vendor_session_id VendorSession_Id_Field) (
		err error)

	Create_Address(ctx context.Context,
		address_buyer_pk Address_BuyerPk_Field,
		address_street_address Address_StreetAddress_Field,
		address_city Address_City_Field,
		address_state Address_State_Field,
		address_zip Address_Zip_Field,
		address_is_billing Address_IsBilling_Field,
		address_id Address_Id_Field) (
		address *Address, err error)

	Create_Buyer(ctx context.Context,
		buyer_id Buyer_Id_Field,
		buyer_first_name Buyer_FirstName_Field,
		buyer_last_name Buyer_LastName_Field) (
		buyer *Buyer, err error)

	Create_BuyerEmail(ctx context.Context,
		buyer_email_buyer_pk BuyerEmail_BuyerPk_Field,
		buyer_email_address BuyerEmail_Address_Field,
		buyer_email_salted_hash BuyerEmail_SaltedHash_Field,
		buyer_email_id BuyerEmail_Id_Field) (
		buyer_email *BuyerEmail, err error)

	Create_BuyerSession(ctx context.Context,
		buyer_session_buyer_pk BuyerSession_BuyerPk_Field,
		buyer_session_id BuyerSession_Id_Field) (
		buyer_session *BuyerSession, err error)

	Create_Conversation(ctx context.Context,
		conversation_vendor_pk Conversation_VendorPk_Field,
		conversation_buyer_pk Conversation_BuyerPk_Field,
		conversation_buyer_unread Conversation_BuyerUnread_Field,
		conversation_vendor_unread Conversation_VendorUnread_Field,
		conversation_message_count Conversation_MessageCount_Field,
		conversation_id Conversation_Id_Field) (
		conversation *Conversation, err error)

	Create_ExecutiveContact(ctx context.Context,
		executive_contact_id ExecutiveContact_Id_Field,
		executive_contact_vendor_pk ExecutiveContact_VendorPk_Field,
		executive_contact_first_name ExecutiveContact_FirstName_Field,
		executive_contact_last_name ExecutiveContact_LastName_Field) (
		executive_contact *ExecutiveContact, err error)

	Create_Message(ctx context.Context,
		message_id Message_Id_Field,
		message_buyer_sent Message_BuyerSent_Field,
		message_description Message_Description_Field,
		message_conversation_pk Message_ConversationPk_Field,
		message_conversation_number Message_ConversationNumber_Field) (
		message *Message, err error)

	Create_Product(ctx context.Context,
		product_id Product_Id_Field,
		product_vendor_pk Product_VendorPk_Field,
		product_price Product_Price_Field,
		product_discount Product_Discount_Field,
		product_discount_active Product_DiscountActive_Field,
		product_sku Product_Sku_Field,
		product_google_bucket_id Product_GoogleBucketId_Field,
		product_ladybug_approved Product_LadybugApproved_Field,
		product_product_active Product_ProductActive_Field,
		product_num_in_stock Product_NumInStock_Field,
		product_description Product_Description_Field,
		product_rating Product_Rating_Field) (
		product *Product, err error)

	Create_ProductReview(ctx context.Context,
		product_review_id ProductReview_Id_Field,
		product_review_buyer_pk ProductReview_BuyerPk_Field,
		product_review_product_pk ProductReview_ProductPk_Field,
		product_review_rating ProductReview_Rating_Field,
		product_review_description ProductReview_Description_Field) (
		product_review *ProductReview, err error)

	Create_PurchasedProduct(ctx context.Context,
		purchased_product_id PurchasedProduct_Id_Field,
		purchased_product_vendor_pk PurchasedProduct_VendorPk_Field,
		purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field,
		purchased_product_product_pk PurchasedProduct_ProductPk_Field,
		purchased_product_purchase_price PurchasedProduct_PurchasePrice_Field) (
		purchased_product *PurchasedProduct, err error)

	Create_TrialProduct(ctx context.Context,
		trial_product_id TrialProduct_Id_Field,
		trial_product_vendor_pk TrialProduct_VendorPk_Field,
		trial_product_buyer_pk TrialProduct_BuyerPk_Field,
		trial_product_product_pk TrialProduct_ProductPk_Field,
		trial_product_trial_price TrialProduct_TrialPrice_Field,
		trial_product_is_returned TrialProduct_IsReturned_Field) (
		trial_product *TrialProduct, err error)

	Create_Vendor(ctx context.Context,
		vendor_id Vendor_Id_Field,
		vendor_fein Vendor_Fein_Field) (
		vendor *Vendor, err error)

	Create_VendorAddress(ctx context.Context,
		vendor_address_vendor_pk VendorAddress_VendorPk_Field,
		vendor_address_street_address VendorAddress_StreetAddress_Field,
		vendor_address_city VendorAddress_City_Field,
		vendor_address_state VendorAddress_State_Field,
		vendor_address_zip VendorAddress_Zip_Field,
		vendor_address_is_billing VendorAddress_IsBilling_Field,
		vendor_address_id VendorAddress_Id_Field) (
		vendor_address *VendorAddress, err error)

	Create_VendorEmail(ctx context.Context,
		vendor_email_id VendorEmail_Id_Field,
		vendor_email_executive_contact_pk VendorEmail_ExecutiveContactPk_Field,
		vendor_email_address VendorEmail_Address_Field,
		vendor_email_salted_hash VendorEmail_SaltedHash_Field) (
		vendor_email *VendorEmail, err error)

	Create_VendorPhone(ctx context.Context,
		vendor_phone_id VendorPhone_Id_Field,
		vendor_phone_executive_contact_pk VendorPhone_ExecutiveContactPk_Field,
		vendor_phone_phone_number VendorPhone_PhoneNumber_Field,
		vendor_phone_country_code VendorPhone_CountryCode_Field,
		vendor_phone_area_code VendorPhone_AreaCode_Field) (
		vendor_phone *VendorPhone, err error)

	Create_VendorSession(ctx context.Context,
		vendor_session_vendor_pk VendorSession_VendorPk_Field,
		vendor_session_id VendorSession_Id_Field) (
		vendor_session *VendorSession, err error)

	Find_BuyerEmail_By_Address(ctx context.Context,
		buyer_email_address BuyerEmail_Address_Field) (
		buyer_email *BuyerEmail, err error)

	Find_Buyer_By_Pk(ctx context.Context,
		buyer_pk Buyer_Pk_Field) (
		buyer *Buyer, err error)

	Find_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
		conversation_vendor_pk Conversation_VendorPk_Field,
		conversation_buyer_pk Conversation_BuyerPk_Field) (
		conversation *Conversation, err error)

	First_BuyerSession_By_BuyerPk(ctx context.Context,
		buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
		buyer_session *BuyerSession, err error)

	Get_BuyerEmail_By_Address(ctx context.Context,
		buyer_email_address BuyerEmail_Address_Field) (
		buyer_email *BuyerEmail, err error)

	Get_BuyerSession_BuyerPk_By_Id(ctx context.Context,
		buyer_session_id BuyerSession_Id_Field) (
		row *BuyerPk_Row, err error)

	Get_BuyerSession_By_BuyerPk(ctx context.Context,
		buyer_session_buyer_pk BuyerSession_BuyerPk_Field) (
		buyer_session *BuyerSession, err error)

	Get_Buyer_By_Pk(ctx context.Context,
		buyer_pk Buyer_Pk_Field) (
		buyer *Buyer, err error)

	Get_Buyer_Pk_By_Id(ctx context.Context,
		buyer_id Buyer_Id_Field) (
		row *Pk_Row, err error)

	Get_Conversation_By_Id(ctx context.Context,
		conversation_id Conversation_Id_Field) (
		conversation *Conversation, err error)

	Get_Conversation_By_VendorPk_And_BuyerPk(ctx context.Context,
		conversation_vendor_pk Conversation_VendorPk_Field,
		conversation_buyer_pk Conversation_BuyerPk_Field) (
		conversation *Conversation, err error)

	Get_Message_By_Id(ctx context.Context,
		message_id Message_Id_Field) (
		message *Message, err error)

	Get_Product_By_Id(ctx context.Context,
		product_id Product_Id_Field) (
		product *Product, err error)

	Get_Product_Pk_Product_Price_By_Id(ctx context.Context,
		product_id Product_Id_Field) (
		row *Pk_Price_Row, err error)

	Get_VendorSession_VendorPk_By_Id(ctx context.Context,
		vendor_session_id VendorSession_Id_Field) (
		row *VendorPk_Row, err error)

	Get_Vendor_Pk_By_Id(ctx context.Context,
		vendor_id Vendor_Id_Field) (
		row *Pk_Row, err error)

	Has_ProductReview_By_Product_Id_And_ProductReview_BuyerPk(ctx context.Context,
		product_id Product_Id_Field,
		product_review_buyer_pk ProductReview_BuyerPk_Field) (
		has bool, err error)

	Has_PurchasedProduct_By_BuyerPk(ctx context.Context,
		purchased_product_buyer_pk PurchasedProduct_BuyerPk_Field) (
		has bool, err error)

	Limited_Message_By_ConversationPk_OrderBy_Desc_CreatedAt(ctx context.Context,
		message_conversation_pk Message_ConversationPk_Field,
		limit int, offset int64) (
		rows []*Message, err error)

	Paged_Conversation_By_BuyerPk(ctx context.Context,
		conversation_buyer_pk Conversation_BuyerPk_Field,
		limit int, ctoken string) (
		rows []*Conversation, ctokenout string, err error)

	Paged_Conversation_By_VendorPk(ctx context.Context,
		conversation_vendor_pk Conversation_VendorPk_Field,
		limit int, ctoken string) (
		rows []*Conversation, ctokenout string, err error)

	Paged_Product_By_ProductActive_Equal_True_And_LadybugApproved_Equal_True_And_NumInStock_Not_Number(ctx context.Context,
		limit int, ctoken string) (
		rows []*Product, ctokenout string, err error)

	UpdateNoReturn_BuyerEmail_By_Address(ctx context.Context,
		buyer_email_address BuyerEmail_Address_Field,
		update BuyerEmail_Update_Fields) (
		err error)

	UpdateNoReturn_Buyer_By_Pk(ctx context.Context,
		buyer_pk Buyer_Pk_Field,
		update Buyer_Update_Fields) (
		err error)

	UpdateNoReturn_Conversation_By_Pk(ctx context.Context,
		conversation_pk Conversation_Pk_Field,
		update Conversation_Update_Fields) (
		err error)

	Update_Address_By_Pk(ctx context.Context,
		address_pk Address_Pk_Field,
		update Address_Update_Fields) (
		address *Address, err error)

	Update_BuyerEmail_By_Address(ctx context.Context,
		buyer_email_address BuyerEmail_Address_Field,
		update BuyerEmail_Update_Fields) (
		buyer_email *BuyerEmail, err error)

	Update_Buyer_By_Pk(ctx context.Context,
		buyer_pk Buyer_Pk_Field,
		update Buyer_Update_Fields) (
		buyer *Buyer, err error)

	Update_Conversation_By_Pk(ctx context.Context,
		conversation_pk Conversation_Pk_Field,
		update Conversation_Update_Fields) (
		conversation *Conversation, err error)

	Update_Product_By_Pk(ctx context.Context,
		product_pk Product_Pk_Field,
		update Product_Update_Fields) (
		product *Product, err error)
}

type TxMethods interface {
	Methods

	Rebind(s string) string
	Commit() error
	Rollback() error
}

type txMethods interface {
	TxMethods

	deleteAll(ctx context.Context) (int64, error)
	makeErr(err error) error
}

type DBMethods interface {
	Methods

	Schema() string
	Rebind(sql string) string
}

type dbMethods interface {
	DBMethods

	wrapTx(tx *sql.Tx) txMethods
	makeErr(err error) error
}

func openpostgres(source string) (*sql.DB, error) {
	return sql.Open("postgres", source)
}

var sqlite3DriverName = "sqlite3_" + fmt.Sprint(time.Now().UnixNano())

func init() {
	sql.Register(sqlite3DriverName, &sqlite3.SQLiteDriver{
		ConnectHook: sqlite3SetupConn,
	})
}

// SQLite3JournalMode controls the journal_mode pragma for all new connections.
// Since it is read without a mutex, it must be changed to the value you want
// before any Open calls.
var SQLite3JournalMode = "WAL"

func sqlite3SetupConn(conn *sqlite3.SQLiteConn) (err error) {
	_, err = conn.Exec("PRAGMA foreign_keys = ON", nil)
	if err != nil {
		return makeErr(err)
	}
	_, err = conn.Exec("PRAGMA journal_mode = "+SQLite3JournalMode, nil)
	if err != nil {
		return makeErr(err)
	}
	return nil
}

func opensqlite3(source string) (*sql.DB, error) {
	return sql.Open(sqlite3DriverName, source)
}
